import asyncio
import inspect
import random
import pandas as pd
import io
import logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
import requests
from datetime import datetime, timedelta
from collections import defaultdict
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BufferedInputFile
)
from aiogram.filters import CommandStart, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramForbiddenError
from aiogram.utils.keyboard import InlineKeyboardBuilder
import os
TOKEN = os.environ.get("7740361367:AAGAnKLBl9G_2ooB7UbIpAiOB5YfUzsw9fs")
import threading
import os
from http.server import BaseHTTPRequestHandler, HTTPServer

# –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã Render –Ω–µ —Ä—É–≥–∞–ª—Å—è
def run_fake_server():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b'Bot is running!')

    server_address = ('0.0.0.0', 10000)
    httpd = HTTPServer(server_address, Handler)
    print(f"–ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {server_address[1]}")
    httpd.serve_forever()

threading.Thread(target=run_fake_server, daemon=True).start()

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ —Ç–æ–∫–µ–Ω Crypto Bot API
# BOT_TOKEN = os.environ.get('BOT_TOKEN') # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7740361367:AAGAnKLBl9G_2ooB7UbIpAiOB5YfUzsw9fs" # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
CRYPTO_BOT_TOKEN = "15372:AAyD0R4vM9Ld1qF2V3yqfE55L17e7Ff92g3tN" # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω Crypto Bot API
CRYPTO_BOT_API_URL = "https://pay.crypt.bot/api/"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# =====================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
# =====================
users = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
tasks = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
invoices_in_progress = {} # {invoice_id: user_id}

# =====================
# –•–≠–ù–î–õ–ï–†–´ –ö–û–ú–ê–ù–î
# =====================

@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users:
        users[user_id] = {
            'username': message.from_user.username if message.from_user.username else f"id{user_id}",
            'balance': 0.0,
            'reg_date': datetime.now().strftime('%d.%m.%Y %H:%M')
        }
        await save_data()
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏ –±–∞–ª–∞–Ω—Å–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
    await show_main_menu(message)

# =====================
# –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ò –ö–ù–û–ü–ö–ò
# =====================

async def show_main_menu(message: types.Message):
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üóÇ –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è")],
            [KeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"), KeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@dp.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message):
    await show_main_menu(message)

# =====================
# –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø FSM
# =====================

class CreateTask(StatesGroup):
    waiting_for_task_description = State()
    waiting_for_task_price = State()

class Deposit(StatesGroup):
    waiting_for_deposit_amount = State()

class Withdraw(StatesGroup):
    waiting_for_withdraw_amount = State()
    waiting_for_wallet_address = State()

class CompleteTask(StatesGroup):
    waiting_for_task_id_to_complete = State()

class ChooseRatingPeriod(StatesGroup):
    waiting_for_period_selection = State()

# =====================
# –•–≠–ù–î–õ–ï–†–´ –¢–ï–ö–°–¢–û–í–´–• –ö–ù–û–ü–û–ö
# =====================

@dp.message(F.text == "üóÇ –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è")
async def my_tasks_handler(message: types.Message):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="create_task"))
    keyboard.add(InlineKeyboardButton(text="üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è", callback_data="show_available_tasks"))
    keyboard.add(InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="complete_task"))
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏:", reply_markup=keyboard.as_markup())

@dp.message(F.text == "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def deposit_handler(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ USDT (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.0):")
    await state.set_state(Deposit.waiting_for_deposit_amount)

@dp.message(F.text == "üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞")
async def withdraw_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    balance = users.get(user_id, {}).get('balance', 0.0)
    await message.answer(f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f} USDT. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:")
    await state.set_state(Withdraw.waiting_for_withdraw_amount)

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats_handler(message: types.Message):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="üèÜ –¢–æ–ø –∑–∞–¥–∞–Ω–∏–π", callback_data="top_tasks"))
    await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", reply_markup=keyboard.as_markup())

@dp.message(F.text == "‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: types.Message):
    user_id = message.from_user.id
    user_data = users.get(user_id, {})
    username = user_data.get('username', '‚Äî')
    balance = user_data.get('balance', 0.0)
    reg_date = user_data.get('reg_date', '‚Äî')
    num_created_tasks = sum(1 for task_id, task in tasks.items() if task['creator_id'] == user_id)
    num_completed_tasks = sum(1 for task_id, task in tasks.items() if task.get('executor_id') == user_id and task['status'] == 'completed')

    await message.answer(
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"ID: `{user_id}`\n"
        f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{username}\n"
        f"–ë–∞–ª–∞–Ω—Å: {balance:.2f} USDT\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date}\n"
        f"–°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {num_created_tasks}\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {num_completed_tasks}",
        parse_mode="Markdown"
    )

# =====================
# –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–õ–õ–ë–≠–ö–û–í (–ò–ù–õ–ê–ô–ù –ö–ù–û–ü–ö–ò)
# =====================

@dp.callback_query(F.data == "create_task")
async def start_create_task(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    await state.set_state(CreateTask.waiting_for_task_description)
    await callback.answer()

@dp.callback_query(F.data == "show_available_tasks")
async def show_available_tasks(callback: types.CallbackQuery):
    available_tasks = [task for task_id, task in tasks.items() if task['status'] == 'available' and task['creator_id'] != callback.from_user.id]
    if not available_tasks:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        return

    for task_id, task in available_tasks:
        creator_username = users.get(task['creator_id'], {}).get('username', f"id{task['creator_id']}")
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="ü§ù –í–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"take_task_{task_id}"))
        await callback.message.answer(
            f"üìù –ó–∞–¥–∞–Ω–∏–µ ID: {task_id}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {task['description']}\n"
            f"–¶–µ–Ω–∞: {task['price']:.2f} USDT\n"
            f"–°–æ–∑–¥–∞—Ç–µ–ª—å: @{creator_username}",
            reply_markup=keyboard.as_markup()
        )
    await callback.answer()


@dp.callback_query(lambda c: c.data and c.data.startswith('take_task_'))
async def take_task_callback(callback: types.CallbackQuery):
    task_id = callback.data.split('_')[2]
    user_id = callback.from_user.id

    if task_id not in tasks or tasks[task_id]['status'] != 'available':
        await callback.message.answer("–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        await callback.answer()
        return

    if tasks[task_id]['creator_id'] == user_id:
        await callback.message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ.")
        await callback.answer()
        return

    tasks[task_id]['status'] = 'in_progress'
    tasks[task_id]['executor_id'] = user_id
    tasks[task_id]['taken_date'] = datetime.now().strftime('%d.%m.%Y %H:%M')
    await save_data()

    creator_id = tasks[task_id]['creator_id']
    creator_username = users.get(creator_id, {}).get('username', f"id{creator_id}")

    try:
        await bot.send_message(creator_id,
                               f"üîî –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ '{tasks[task_id]['description']}' (ID: {task_id}) –±—ã–ª–æ –≤–∑—è—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{callback.from_user.username} (ID: {user_id}).")
    except TelegramForbiddenError:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {creator_id}. –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

    await callback.message.answer(f"–í—ã –≤–∑—è–ª–∏ –∑–∞–¥–∞–Ω–∏–µ ID: {task_id}. –£–¥–∞—á–∏!")
    await callback.answer()

@dp.callback_query(F.data == "complete_task")
async def start_complete_task(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    in_progress_tasks = [task_id for task_id, task in tasks.items() if task.get('executor_id') == user_id and task['status'] == 'in_progress']

    if not in_progress_tasks:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
        await callback.answer()
        return

    response_text = "–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n"
    for task_id in in_progress_tasks:
        task = tasks[task_id]
        response_text += f"ID: {task_id}\n–û–ø–∏—Å–∞–Ω–∏–µ: {task['description']}\n–¶–µ–Ω–∞: {task['price']:.2f} USDT\n\n"

    response_text += "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å:"
    await callback.message.answer(response_text)
    await state.set_state(CompleteTask.waiting_for_task_id_to_complete)
    await callback.answer()


@dp.callback_query(F.data == "top_tasks")
async def choose_top_period(callback: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="üìà –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="top_tasks_week"))
    keyboard.add(InlineKeyboardButton(text="üìà –ó–∞ –º–µ—Å—è—Ü", callback_data="top_tasks_month"))
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ç–æ–ø–∞ –∑–∞–¥–∞–Ω–∏–π:", reply_markup=keyboard.as_markup())
    await state.set_state(ChooseRatingPeriod.waiting_for_period_selection)
    await callback.answer()

@dp.callback_query(lambda c: c.data and c.data.startswith('top_tasks_'), state=ChooseRatingPeriod.waiting_for_period_selection)
async def show_top_tasks_period(callback: types.CallbackQuery, state: FSMContext):
    period = callback.data.split('_')[2] # 'week' or 'month'
    result_message = get_top_users_by_completed_tasks(period)
    await callback.message.answer(result_message, parse_mode="Markdown")
    await state.clear()
    await callback.answer()

# =====================
# –•–≠–ù–î–õ–ï–†–´ –°–û–°–¢–û–Ø–ù–ò–ô (FSM)
# =====================

@dp.message(CreateTask.waiting_for_task_description)
async def process_task_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–¥–∞–Ω–∏—è –≤ USDT (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.5):")
    await state.set_state(CreateTask.waiting_for_task_price)

@dp.message(CreateTask.waiting_for_task_price)
async def process_task_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text.replace(',', '.'))
        if price <= 0:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É:")
            return
        
        user_id = message.from_user.id
        if users[user_id]['balance'] < price:
            await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ ({users[user_id]['balance']:.2f} USDT). –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
            await state.clear()
            await show_main_menu(message)
            return

        data = await state.get_data()
        description = data['description']
        task_id = str(random.randint(100000, 999999))
        tasks[task_id] = {
            'creator_id': user_id,
            'description': description,
            'price': price,
            'status': 'available',
            'created_date': datetime.now().strftime('%d.%m.%Y %H:%M')
        }
        users[user_id]['balance'] -= price # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        await save_data()

        await message.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! ID: {task_id}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–¶–µ–Ω–∞: {price:.2f} USDT. –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.")
        await state.clear()
        await show_main_menu(message)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.5):")


@dp.message(Deposit.waiting_for_deposit_amount)
async def process_deposit_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            await message.answer("–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
            return

        user_id = message.from_user.id
        success, result = await process_deposit(user_id, amount)

        if success:
            pay_url = result['pay_url']
            invoice_id = result['invoice_id']
            invoices_in_progress[invoice_id] = user_id # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            await message.answer(
                f"‚úÖ –°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω!\n"
                f"–°—É–º–º–∞: {amount:.2f} USDT\n"
                f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {pay_url}\n\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            )
            logging.info(f"Generated invoice for user {user_id}: {pay_url}")
        else:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {result}")
        await state.clear()
        await show_main_menu(message)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.0):")


@dp.message(Withdraw.waiting_for_withdraw_amount)
async def process_withdraw_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))
        user_id = message.from_user.id
        balance = users.get(user_id, {}).get('balance', 0.0)

        if amount <= 0:
            await message.answer("–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
            return
        if amount > balance:
            await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ ({balance:.2f} USDT). –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–µ –±–æ–ª–µ–µ –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞:")
            return

        await state.update_data(withdraw_amount=amount)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å USDT TRC20 –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞:")
        await state.set_state(Withdraw.waiting_for_wallet_address)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10.0):")

@dp.message(Withdraw.waiting_for_wallet_address)
async def process_wallet_address(message: types.Message, state: FSMContext):
    wallet_address = message.text.strip()
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –∞–¥—Ä–µ—Å–∞ USDT TRC20
    if not wallet_address: # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø—É—Å—Ç–æ–π –∞–¥—Ä–µ—Å
        await message.answer("–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å:")
        return

    data = await state.get_data()
    amount = data['withdraw_amount']
    user_id = message.from_user.id

    # –ò–º–∏—Ç–∞—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
    users[user_id]['balance'] -= amount
    await save_data()

    await message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount:.2f} USDT –Ω–∞ –∞–¥—Ä–µ—Å `{wallet_address}` –ø—Ä–∏–Ω—è—Ç–∞. –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", parse_mode="Markdown")
    logging.info(f"Withdrawal request: User {user_id} wants to withdraw {amount} USDT to {wallet_address}")
    await state.clear()
    await show_main_menu(message)

@dp.message(CompleteTask.waiting_for_task_id_to_complete)
async def process_task_id_to_complete(message: types.Message, state: FSMContext):
    task_id = message.text.strip()
    user_id = message.from_user.id

    if task_id not in tasks:
        await message.answer("–ó–∞–¥–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:")
        return

    task = tasks[task_id]
    if task.get('executor_id') != user_id or task['status'] != 'in_progress':
        await message.answer("–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –ª–∏–±–æ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞–º–∏, –ª–∏–±–æ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:")
        return

    task['status'] = 'completed'
    task['completed_date'] = datetime.now().strftime('%d.%m.%Y %H:%M')
    creator_id = task['creator_id']
    price = task['price']

    # –ó–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    users[user_id]['balance'] += price
    await save_data()

    await message.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ ID: {task_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! {price:.2f} USDT –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.")

    # –£–≤–µ–¥–æ–º–∏—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞–¥–∞–Ω–∏—è
    try:
        await bot.send_message(creator_id,
                               f"üîî –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ '{task['description']}' (ID: {task_id}) –±—ã–ª–æ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{message.from_user.username} (ID: {user_id}).")
    except TelegramForbiddenError:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {creator_id}. –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

    await state.clear()
    await show_main_menu(message)


# =====================
# –§–£–ù–ö–¶–ò–ò –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° CRYPTO BOT API
# =====================

async def create_crypto_bot_invoice(user_id: int, amount_usdt: float) -> dict:
    headers = {
        'Crypto-Pay-API-Token': CRYPTO_BOT_TOKEN,
        'Content-Type': 'application/json'
    }

    payload = {
        'asset': 'USDT',
        'amount': str(amount_usdt),
        'description': f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}',
        'payload': str(user_id),
        'allow_anonymous': False,
        'compact': True # Added for compact mode
    }

    try:
        response = requests.post(
            f'{CRYPTO_BOT_API_URL}createInvoice',
            headers=headers,
            json=payload,
            timeout=15
        )
        response_data = response.json()
        print("Crypto Bot API Response:", response_data) # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        return response_data
    except Exception as e:
        print(f"Error creating invoice: {e}")
        return {'ok': False, 'error': {'name': str(e)}}


async def process_deposit(user_id: int, amount_usdt: float) -> tuple[bool, dict]:
    if user_id not in users:
        return False, {"name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    invoice = await create_crypto_bot_invoice(user_id, amount_usdt)
    if not invoice:
        return False, {"name": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ"}
    if not invoice.get('ok', False):
        error_msg = invoice.get('error', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        return False, {"name": f"–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {error_msg}"}
    if not invoice.get('result'):
        return False, {"name": "–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∞ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã"}
    
    invoice_id = invoice['result']['invoice_id']
    
    # Construct the compact startapp URL
    # This is the line that was changed/added to provide the compact link
    compact_pay_url = f"https://t.me/CryptoBot/app?startapp=invoice-{invoice_id}&mode=compact"

    return True, {
        'pay_url': compact_pay_url, # Use the newly constructed compact URL
        'invoice_id': invoice_id
    }


async def check_crypto_bot_invoices():
    headers = {
        'Crypto-Pay-API-Token': CRYPTO_BOT_TOKEN
    }
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω–≤–æ–π—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º
    invoice_ids_to_check = list(invoices_in_progress.keys())
    if not invoice_ids_to_check:
        return

    # Crypto Bot API –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω–≤–æ–π—Å–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
    payload = {'invoice_ids': ','.join(invoice_ids_to_check)}

    try:
        response = requests.get(
            f'{CRYPTO_BOT_API_URL}getInvoices',
            headers=headers,
            params=payload,
            timeout=15
        )
        response_data = response.json()
        if response_data.get('ok') and response_data.get('result'):
            for invoice in response_data['result']:
                invoice_id = str(invoice['invoice_id'])
                if invoice_id in invoices_in_progress:
                    if invoice['status'] == 'paid':
                        user_id = invoices_in_progress.pop(invoice_id) # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö
                        amount = float(invoice['amount'])
                        if user_id in users:
                            users[user_id]['balance'] += amount
                            await save_data()
                            print(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} USDT.")
                            try:
                                await bot.send_message(user_id, f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount:.2f} USDT!")
                            except TelegramForbiddenError:
                                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
                        else:
                            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –∏–Ω–≤–æ–π—Å {invoice_id} –æ–ø–ª–∞—á–µ–Ω.")
                    elif invoice['status'] == 'expired' or invoice['status'] == 'cancelled':
                        invoices_in_progress.pop(invoice_id, None) # –£–¥–∞–ª—è–µ–º, –µ—Å–ª–∏ –∏—Å—Ç–µ–∫ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω
                        print(f"–ò–Ω–≤–æ–π—Å {invoice_id} –∏—Å—Ç–µ–∫/–æ—Ç–º–µ–Ω–µ–Ω.")
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–æ–≤: {response_data.get('error', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    except Exception as e:
        print(f"Error checking invoices: {e}")


# =====================
# –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–ú–ò
# =====================

DATA_FILE = 'bot_data.csv'

async def save_data():
    data_to_save = []
    for user_id, user_data in users.items():
        data_to_save.append({
            'type': 'user',
            'id': user_id,
            'username': user_data.get('username'),
            'balance': user_data.get('balance'),
            'reg_date': user_data.get('reg_date')
        })
    for task_id, task_data in tasks.items():
        data_to_save.append({
            'type': 'task',
            'id': task_id,
            'creator_id': task_data.get('creator_id'),
            'executor_id': task_data.get('executor_id'),
            'description': task_data.get('description'),
            'price': task_data.get('price'),
            'status': task_data.get('status'),
            'created_date': task_data.get('created_date'),
            'taken_date': task_data.get('taken_date'),
            'completed_date': task_data.get('completed_date')
        })
    df = pd.DataFrame(data_to_save)
    df.to_csv(DATA_FILE, index=False)
    print("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

async def load_data():
    global users, tasks
    if not os.path.exists(DATA_FILE):
        print("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        users = {}
        tasks = {}
        return

    try:
        df = pd.read_csv(DATA_FILE)
        users = {}
        tasks = {}
        for index, row in df.iterrows():
            if row['type'] == 'user':
                user_id = int(row['id'])
                users[user_id] = {
                    'username': row.get('username'),
                    'balance': float(row.get('balance', 0.0)),
                    'reg_date': row.get('reg_date')
                }
            elif row['type'] == 'task':
                task_id = str(row['id'])
                tasks[task_id] = {
                    'creator_id': int(row.get('creator_id')),
                    'executor_id': int(row.get('executor_id')) if pd.notna(row.get('executor_id')) else None,
                    'description': row.get('description'),
                    'price': float(row.get('price', 0.0)),
                    'status': row.get('status'),
                    'created_date': row.get('created_date'),
                    'taken_date': row.get('taken_date'),
                    'completed_date': row.get('completed_date')
                }
        print("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}. –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
        users = {}
        tasks = {}

# =====================
# –§–£–ù–ö–¶–ò–ò –ê–ù–ê–õ–ò–¢–ò–ö–ò
# =====================

def get_top_users_by_completed_tasks(period: str):
    user_completed_tasks_count = defaultdict(int)
    current_date = datetime.now()

    if period == 'week':
        start_date = current_date - timedelta(days=7)
    elif period == 'month':
        start_date = current_date - timedelta(days=30)
    else:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥."

    for task_id, task in tasks.items():
        if task['status'] == 'completed' and task.get('completed_date'):
            task_date_str = task['completed_date']
            task_date = None

            # Attempt to parse as datetime object
            if isinstance(task_date_str, datetime):
                task_date = task_date_str
            elif isinstance(task_date_str, str):
                try:
                    task_date = datetime.strptime(task_date_str, '%d.%m.%Y %H:%M')
                except ValueError:
                    # Fallback for older formats if necessary, or log error
                    continue # Skip if date format is not recognized

            if task_date and task_date >= start_date:
                executor_id = task.get('executor_id')
                if executor_id:
                    user_completed_tasks_count[executor_id] += 1

    top_users = []
    for user_id, count in user_completed_tasks_count.items():
        if user_id in users:
            username = users[user_id].get('username', '‚Äî')
            top_users.append((user_id, count, username))

    top_users.sort(key=lambda x: x[1], reverse=True)

    if not top_users:
        return "üèÜ –¢–æ–ø –∑–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."

    result = f"üèÜ –¢–æ–ø –∑–∞–¥–∞–Ω–∏–π –∑–∞ {'–Ω–µ–¥–µ–ª—é' if period == 'week' else '–º–µ—Å—è—Ü'}:\n\n"
    for i, (user_id, count, username) in enumerate(top_users[:10], 1):
        result += f"{i}. @{username} (ID: {user_id}) - {count} –∑–∞–¥–∞–Ω–∏–π\n"

    return result

def get_top_users_by_created_tasks(period: str):
    user_created_tasks_count = defaultdict(int)
    current_date = datetime.now()

    if period == 'week':
        start_date = current_date - timedelta(days=7)
    elif period == 'month':
        start_date = current_date - timedelta(days=30)
    else:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥."

    for task_id, task in tasks.items():
        if task.get('created_date'):
            task_date = task['created_date']
            if isinstance(task_date, datetime):
                if task_date >= start_date:
                    user_created_tasks_count[task['creator_id']] += 1
            elif isinstance(task_date, str):
                try:
                    date_obj = datetime.strptime(task_date, '%d.%m.%Y %H:%M')
                    if date_obj >= start_date:
                        user_created_tasks_count[task['creator_id']] += 1
                except ValueError:
                    continue

    top_users = []
    for user_id, count in user_created_tasks_count.items():
        if user_id in users:
            username = users[user_id].get('username', '‚Äî')
            top_users.append((user_id, count, username))

    top_users.sort(key=lambda x: x[1], reverse=True)

    if not top_users:
        return "üèÜ –¢–æ–ø –∑–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."

    result = f"üèÜ –¢–æ–ø —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –∑–∞–¥–∞–Ω–∏–π –∑–∞ {'–Ω–µ–¥–µ–ª—é' if period == 'week' else '–º–µ—Å—è—Ü'}:\n\n"
    for i, (user_id, count, username) in enumerate(top_users[:10], 1):
        result += f"{i}. @{username} (ID: {user_id}) - {count} –∑–∞–¥–∞–Ω–∏–π\n"

    return result


def get_top_users_by_total_completed_tasks_all_time():
    user_completed_tasks_count = defaultdict(int)

    for task_id, task in tasks.items():
        if task['status'] == 'completed' and task.get('executor_id'):
            user_completed_tasks_count[task['executor_id']] += 1

    top_users = []
    for user_id, count in user_completed_tasks_count.items():
        username = users.get(user_id, {}).get('username', '‚Äî')
        top_users.append((user_id, count, username))

    top_users.sort(key=lambda x: x[1], reverse=True)

    if not top_users:
        return "üèÜ –û–±—â–∏–π —Ç–æ–ø –∑–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç."

    result = "üèÜ –û–±—â–∏–π —Ç–æ–ø –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π (–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è):\n\n"
    for i, (user_id, count, username) in enumerate(top_users[:10], 1):
        result += f"{i}. @{username} (ID: {user_id}) - {count} –∑–∞–¥–∞–Ω–∏–π\n"

    return result


def get_total_tasks_completed_count(period: str):
    current_date = datetime.now()
    count = 0

    if period == 'week':
        start_date = current_date - timedelta(days=7)
    elif period == 'month':
        start_date = current_date - timedelta(days=30)
    else:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥."

    for task_id, task in tasks.items():
        if task['status'] == 'completed' and task.get('completed_date'):
            task_date_str = task['completed_date']
            task_date = None

            if isinstance(task_date_str, datetime):
                task_date = task_date_str
            elif isinstance(task_date_str, str):
                try:
                    task_date = datetime.strptime(task_date_str, '%d.%m.%Y %H:%M')
                except ValueError:
                    continue

            if task_date and task_date >= start_date:
                count += 1
    return count

def get_total_tasks_created_count(period: str):
    current_date = datetime.now()
    count = 0

    if period == 'week':
        start_date = current_date - timedelta(days=7)
    elif period == 'month':
        start_date = current_date - timedelta(days=30)
    else:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥."

    for task_id, task in tasks.items():
        if task.get('created_date'):
            task_date_str = task['created_date']
            task_date = None

            if isinstance(task_date_str, datetime):
                task_date = task_date_str
            elif isinstance(task_date_str, str):
                try:
                    task_date = datetime.strptime(task_date_str, '%d.%m.%Y %H:%M')
                    if task_date >= start_date:
                        count += 1
                except ValueError:
                    continue

    return count


def get_total_users_registered_count(period: str):
    current_date = datetime.now()
    count = 0

    if period == 'week':
        start_date = current_date - timedelta(days=7)
    elif period == 'month':
        start_date = current_date - timedelta(days=30)
    else:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥."

    for user_id, user_data in users.items():
        if user_data.get('reg_date'):
            reg_date_str = user_data['reg_date']
            reg_date = None

            if isinstance(reg_date_str, datetime):
                reg_date = reg_date_str
            elif isinstance(reg_date_str, str):
                try:
                    reg_date = datetime.strptime(reg_date_str, '%d.%m.%Y %H:%M')
                    if reg_date >= start_date:
                        count += 1
                except ValueError:
                    continue
    return count

def get_top_users_by_completed_tasks_general():
    user_completed_tasks_count = defaultdict(int)

    for task_id, task in tasks.items():
        if task['status'] == 'completed' and task.get('executor_id'):
            user_completed_tasks_count[task['executor_id']] += 1

    top_users = []
    for user_id, count in user_completed_tasks_count.items():
        username = users.get(user_id, {}).get('username', '‚Äî')
        top_users.append((user_id, count, username))

    top_users.sort(key=lambda x: x[1], reverse=True)

    if not top_users:
        return "üèÜ –¢–æ–ø –∑–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç."

    result = "üèÜ –¢–æ–ø –∑–∞–¥–∞–Ω–∏–π (–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è):\n\n"
    for i, (user_id, count, username) in enumerate(top_users[:10], 1):
        result += f"{i}. @{username} (ID: {user_id}) - {count} –∑–∞–¥–∞–Ω–∏–π\n"

    return result

def get_top_users_by_created_tasks_general():
    user_created_tasks_count = defaultdict(int)

    for task_id, task in tasks.items():
        if task.get('creator_id'):
            user_created_tasks_count[task['creator_id']] += 1

    top_users = []
    for user_id, count in user_created_tasks_count.items():
        username = users.get(user_id, {}).get('username', '‚Äî')
        top_users.append((user_id, count, username))

    top_users.sort(key=lambda x: x[1], reverse=True)

    if not top_users:
        return "üèÜ –¢–æ–ø —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –∑–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç."

    result = "üèÜ –¢–æ–ø —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –∑–∞–¥–∞–Ω–∏–π (–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è):\n\n"
    for i, (user_id, count, username) in enumerate(top_users[:10], 1):
        result += f"{i}. @{username} (ID: {user_id}) - {count} –∑–∞–¥–∞–Ω–∏–π\n"

    return result

def get_total_tasks_completed_count_general():
    count = 0
    for task_id, task in tasks.items():
        if task['status'] == 'completed':
            count += 1
    return count

def get_total_tasks_created_count_general():
    return len(tasks)

def get_total_users_registered_count_general():
    return len(users)

def get_balance_distribution():
    balances = [user['balance'] for user_id, user in users.items()]
    if not balances:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–∞–Ω—Å–∞—Ö."

    total_balance = sum(balances)
    avg_balance = total_balance / len(balances)
    max_balance = max(balances)
    min_balance = min(balances)

    result = (
        f"üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤:\n\n"
        f"–û–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_balance:.2f} USDT\n"
        f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: {avg_balance:.2f} USDT\n"
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {max_balance:.2f} USDT\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {min_balance:.2f} USDT\n"
    )
    return result

def get_task_status_distribution():
    status_counts = defaultdict(int)
    for task_id, task in tasks.items():
        status_counts[task['status']] += 1

    if not status_counts:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—É—Å–∞—Ö –∑–∞–¥–∞–Ω–∏–π."

    total_tasks = sum(status_counts.values())
    result = "üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞–Ω–∏–π:\n\n"
    for status, count in status_counts.items():
        percentage = (count / total_tasks) * 100 if total_tasks > 0 else 0
        result += f"- {status.capitalize()}: {count} ({percentage:.2f}%)\n"
    return result

def get_average_task_price():
    prices = [task['price'] for task_id, task in tasks.items()]
    if not prices:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –∑–∞–¥–∞–Ω–∏–π."

    avg_price = sum(prices) / len(prices)
    return f"üí≤ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞–¥–∞–Ω–∏—è: {avg_price:.2f} USDT"


# =====================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# =====================

async def run_bot():
    while True:
        try:
            print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
            await dp.start_polling(bot, skip_updates=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(5)

async def periodic_check_invoices():
    while True:
        await check_crypto_bot_invoices()
        await asyncio.sleep(60) # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–≤–æ–π—Å—ã –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

async def main():
    await load_data()
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–≤–æ–π—Å–æ–≤
    asyncio.create_task(periodic_check_invoices())
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞
    await run_bot()

if __name__ == "__main__":
    asyncio.run(main())
