import asyncio
import inspect
import random
import pandas as pd
import io
import logging
logging.basicConfig(
     format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
     level=logging.INFO
 )
import requests
from datetime import datetime, timedelta
from collections import defaultdict
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
     ReplyKeyboardMarkup,
     KeyboardButton,
     InlineKeyboardMarkup,
     InlineKeyboardButton,
     BufferedInputFile
 )
from aiogram.filters import CommandStart, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramForbiddenError
from aiogram.utils.keyboard import InlineKeyboardBuilder
import os

# Import for the fake server
from aiohttp import web

# –¢–û–ö–ï–ù–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render)
# TELEGRAM_BOT_API_TOKEN - –¥–ª—è –≤–∞—à–µ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –∏–∑ @BotFather
API_TOKEN = os.environ.get('TELEGRAM_BOT_API_TOKEN', '–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê_–ò–ó_BOTFATHER_–ó–î–ï–°–¨_–ö–ê–ö_–ó–ê–ì–õ–£–®–ö–ê') # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ env vars
# CRYPTO_BOT_API_TOKEN - –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Crypto Bot –∏–∑ @CryptoBot
CRYPTO_BOT_TOKEN = os.environ.get('CRYPTO_BOT_API_TOKEN', '–í–ê–®_–¢–û–ö–ï–ù_CRYPTOBOT_–ó–î–ï–°–¨_–ö–ê–ö_–ó–ê–ì–õ–£–®–ö–ê') # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ env vars

# !!! –í–†–ï–ú–ï–ù–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –û–¢–õ–ê–î–ö–ò !!!
# –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –≤—ã–≤–µ–¥–µ—Ç –ø–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–æ–∫–µ–Ω–∞ Crypto Bot –≤ –ª–æ–≥–∏ Render.
# –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω —á–∏—Ç–∞–µ—Ç—Å—è –≤–µ—Ä–Ω–æ, –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É.
logging.info(f"Using Crypto Bot Token (first 5 chars): {CRYPTO_BOT_TOKEN[:5]}... (length: {len(CRYPTO_BOT_TOKEN)})")

ADMIN_IDS = [1041720539, 6216901034] # –í–∞—à–∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
CRYPTO_BOT_API_URL = 'https://pay.crypt.bot/api/'

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –º–∞–π–Ω–∏–Ω–≥–∞
MINING_COOLDOWN = 3600  # 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
MINING_REWARD_RANGE = (3, 3)  # –î–∏–∞–ø–∞–∑–æ–Ω –Ω–∞–≥—Ä–∞–¥—ã
TASK_REWARD_RANGE = (5, 10)  # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ
REFERRAL_REWARD = 3  # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
MIN_WITHDRAWAL = 0.05  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –≤ USDT
ZB_EXCHANGE_RATE = 0.01  # –ö—É—Ä—Å 1 Zebranium = 0.01 USDT

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
blocked_users = set()
users = {}
tasks = {}
task_proofs = defaultdict(dict)
task_completion_dates = defaultdict(dict)
pending_approvals = {}
maintenance_mode = False

# –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class TaskStates(StatesGroup):
     waiting_for_proof = State()

class BroadcastState(StatesGroup):
     waiting_for_message = State()

class BlockState(StatesGroup):
     waiting_for_id = State()

class UnblockState(StatesGroup):
     waiting_for_id = State()

class AddTaskState(StatesGroup):
     waiting_for_task_number = State()
     waiting_for_task_text = State()
     waiting_for_task_photo = State()

class DeleteTaskState(StatesGroup):
     waiting_for_task_number = State()

class TopStates(StatesGroup):
     waiting_top_type = State()
     waiting_referral_period = State()
     waiting_task_period = State()

class EditUserState(StatesGroup):
     waiting_for_id = State()
     waiting_for_field = State()
     waiting_for_value = State()

class WithdrawState(StatesGroup):
     waiting_for_amount = State()

class DepositState(StatesGroup):
     waiting_for_amount = State()

# =====================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =====================

def check_not_blocked(func):
     async def wrapper(message: types.Message, **kwargs):
         kwargs.pop('dispatcher', None)

         if message.from_user.id in blocked_users:
             await message.answer("‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
             return

         if maintenance_mode and message.from_user.id not in ADMIN_IDS:
             await message.answer("üîß –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
             return

         return await func(message, **kwargs)
     return wrapper

def get_main_kb(is_admin: bool = False) -> ReplyKeyboardMarkup:
     kb = [
         [KeyboardButton(text="üëÄ–ü—Ä–æ—Ñ–∏–ª—å")],
         [KeyboardButton(text="üë•–†–µ—Ñ–µ—Ä–∞–ª—ã"), KeyboardButton(text="üíº–ó–∞–¥–∞–Ω–∏—è")],
         [KeyboardButton(text="‚õèÔ∏è–ú–∞–π–Ω–∏–Ω–≥"), KeyboardButton(text="üìà–¢–æ–ø—ã")],
         [KeyboardButton(text="‚úâÔ∏è–ü–æ–º–æ—â—å")]
     ]
     if is_admin:
         kb.append([KeyboardButton(text="üëë–ê–¥–º–∏–Ω–∫–∞")])
     return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
def get_admin_kb() -> ReplyKeyboardMarkup:
     return ReplyKeyboardMarkup(
         keyboard=[
             [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üßæ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
             [KeyboardButton(text="üì® –†–∞—Å—Å—ã–ª–∫–∞"), KeyboardButton(text="üíº –ó–∞–¥–∞–Ω–∏—è")], # Corrected from Keyboard to KeyboardButton
             [KeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton(text="üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")],
             [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
             [KeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")],
             [KeyboardButton(text="üîß –¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ –í–∫–ª" if not maintenance_mode else "üîß –¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ –í—ã–∫–ª")],
             [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
         ],
         resize_keyboard=True
     )

def get_tasks_kb() -> ReplyKeyboardMarkup:
     kb = []
     for task_num in sorted(tasks.keys()):
         kb.append([KeyboardButton(text=f"–ó–∞–¥–∞–Ω–∏–µ {task_num}")])
     kb.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
     return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def get_task_kb(task_num: int) -> ReplyKeyboardMarkup:
     return ReplyKeyboardMarkup(
         keyboard=[
             [KeyboardButton(text=f"‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ {task_num}")],
             [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
         ],
         resize_keyboard=True
     )

def get_tops_type_kb() -> ReplyKeyboardMarkup:
     return ReplyKeyboardMarkup(
         keyboard=[
             [KeyboardButton(text="üèÜ –¢–æ–ø—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"), KeyboardButton(text="üèÜ –¢–æ–ø—ã –∑–∞–¥–∞–Ω–∏–π")],
             [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
         ],
         resize_keyboard=True
     )

def get_period_kb() -> ReplyKeyboardMarkup:
     return ReplyKeyboardMarkup(
         keyboard=[
             [KeyboardButton(text="üìÖ –¢–æ–ø –Ω–µ–¥–µ–ª–∏"), KeyboardButton(text="üìÖ –¢–æ–ø –º–µ—Å—è—Ü–∞")],
             [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
         ],
         resize_keyboard=True
     )

def get_tasks_admin_kb() -> ReplyKeyboardMarkup:
     return ReplyKeyboardMarkup(
         keyboard=[
             [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"), KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")],
             [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É")]
         ],
         resize_keyboard=True
     )

def get_edit_user_kb() -> ReplyKeyboardMarkup:
     return ReplyKeyboardMarkup(
         keyboard=[
             [KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã")],
             [KeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π"), KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
         ],
         resize_keyboard=True
     )

# =====================
# –§–£–ù–ö–¶–ò–ò –í–´–í–û–î–ê –ò –ü–û–ü–û–õ–ù–ï–ù–ò–Ø
# =====================

async def create_crypto_bot_check(user_id: int, amount_usdt: float) -> dict:
     headers = {
         'Crypto-Pay-API-Token': CRYPTO_BOT_TOKEN,
         'Content-Type': 'application/json'
     }

     payload = {
         'asset': 'USDT',
         'amount': str(amount_usdt),
         'description': f'–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}',
         'payload': str(user_id),
         'public': True
     }

     try:
         response = requests.post(
             f'{CRYPTO_BOT_API_URL}createCheck',
             headers=headers,
             json=payload,
             timeout=15
         )
         response_data = response.json()
         print("Crypto Bot API Response:", response_data)
         return response_data
     except Exception as e:
         print(f"Error creating check: {e}")
         return {'ok': False, 'error': {'name': str(e)}}

async def create_crypto_bot_invoice(user_id: int, amount_usdt: float) -> dict:
     headers = {
         'Crypto-Pay-API-Token': CRYPTO_BOT_TOKEN,
         'Content-Type': 'application/json'
     }

     payload = {
         'asset': 'USDT',
         'amount': str(amount_usdt),
         'description': f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}',
         'payload': str(user_id),
         'allow_anonymous': False,
         'compact': True # Added for compact mode
     }

     try:
         response = requests.post(
             f'{CRYPTO_BOT_API_URL}createInvoice',
             headers=headers,
             json=payload,
             timeout=15
         )
         response_data = response.json()
         print("Crypto Bot API Response:", response_data)
         return response_data
     except Exception as e:
         print(f"Error creating invoice: {e}")
         return {'ok': False, 'error': {'name': str(e)}}

async def check_invoice_status(invoice_id: int) -> dict:
     headers = {
         'Crypto-Pay-API-Token': CRYPTO_BOT_TOKEN,
         'Content-Type': 'application/json'
     }

     try:
         response = requests.get(
             f'{CRYPTO_BOT_API_URL}getInvoices?invoice_ids={invoice_id}',
             headers=headers,
             timeout=15
         )
         response_data = response.json()
         return response_data
     except Exception as e:
         print(f"Error checking invoice status: {e}")
         return {'ok': False, 'error': {'name': str(e)}}

async def process_withdrawal(user_id: int, amount_zb: int):
     if user_id not in users:
         return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

     user_data = users[user_id]
     if user_data['balance'] < amount_zb:
         return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ"

     amount_usdt = amount_zb * ZB_EXCHANGE_RATE
     if amount_usdt < MIN_WITHDRAWAL:
         return False, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAWAL} USDT"

     check = await create_crypto_bot_check(user_id, amount_usdt)

     if not check:
         return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ"

     if not check.get('ok', False):
         error_msg = check.get('error', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
         return False, f"–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {error_msg}"

     if not check.get('result'):
         return False, "–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∞ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞"

     if 'bot_check_url' not in check['result']:
         return False, "–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∞ —Å—Å—ã–ª–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞"

     users[user_id]['balance'] -= amount_zb
     return True, check['result']['bot_check_url']

async def process_deposit(user_id: int, amount_usdt: float):
     if user_id not in users:
         return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

     invoice = await create_crypto_bot_invoice(user_id, amount_usdt)

     if not invoice:
         return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ"

     if not invoice.get('ok', False):
         error_msg = invoice.get('error', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
         return False, f"–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {error_msg}"

     if not invoice.get('result'):
         return False, "–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∞ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã"

     if 'pay_url' not in invoice['result']:
         return False, "–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∞ —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã"

     return True, {
         'pay_url': invoice['result']['pay_url'],
         'invoice_id': invoice['result']['invoice_id']
     }

# =====================
# –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê
# =====================

@dp.message(CommandStart())
@check_not_blocked
async def cmd_start(message: types.Message, command: CommandObject = None, **kwargs):
     if maintenance_mode and message.from_user.id not in ADMIN_IDS:
         return

     user_id = message.from_user.id
     username = message.from_user.username or "‚Äî"

     referrer_id = None
     if command and command.args and command.args.isdigit():
         referrer_id = int(command.args)

     if user_id not in users:
         users[user_id] = {
             'reg_date': datetime.now().strftime('%d.%m.%Y %H:%M'),
             'referrals': [],
             'username': username,
             'balance': 0,
             'last_mine_time': None
         }

         if referrer_id and referrer_id != user_id and referrer_id in users:
             users[referrer_id]['referrals'].append(user_id)
             users[referrer_id]['balance'] += REFERRAL_REWARD
             try:
                 await bot.send_message(
                     referrer_id,
                     f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {REFERRAL_REWARD} Zebranium –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!"
                 )
             except Exception:
                 pass

     is_admin = user_id in ADMIN_IDS
     await message.answer(
         "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
         reply_markup=get_main_kb(is_admin)
     )

@dp.message(F.text == "üëÄ–ü—Ä–æ—Ñ–∏–ª—å")
@check_not_blocked
async def profile_handler(message: types.Message, **kwargs):
     user = users.get(message.from_user.id, {})
     balance = user.get('balance', 0)

     builder = InlineKeyboardBuilder()
     builder.add(InlineKeyboardButton(
         text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
         callback_data="deposit_funds"
     ))

     if balance >= (MIN_WITHDRAWAL / ZB_EXCHANGE_RATE):
         builder.add(InlineKeyboardButton(
             text="üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞",
             callback_data="withdraw_funds"
         ))

     await message.answer(
         f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
         f"üÜî ID: {message.from_user.id}\n"
         f"üîó –Æ–∑–µ—Ä–Ω–µ–π–º: @{user.get('username', '‚Äî')}\n"
         f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.get('reg_date', '‚Äî')}\n"
         f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(user.get('referrals', []))}\n"
         f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {len(task_proofs.get(message.from_user.id, {}))}\n"
         f"üíé –ë–∞–ª–∞–Ω—Å: {balance} Zebranium (‚âà{balance * ZB_EXCHANGE_RATE:.2f} USDT)\n\n"
         f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAWAL} USDT",
         reply_markup=builder.as_markup()
     )

@dp.callback_query(F.data == "deposit_funds")
async def deposit_funds_handler(callback: types.CallbackQuery, state: FSMContext):
     await callback.message.answer(
         "üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n"
         "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ USDT, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5):",
         reply_markup=ReplyKeyboardMarkup(
             keyboard=[[KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞")]],
             resize_keyboard=True
         )
     )
     await state.set_state(DepositState.waiting_for_amount)
     await callback.answer()

@dp.message(DepositState.waiting_for_amount, F.text == "üîô –û—Ç–º–µ–Ω–∞")
async def cancel_deposit(message: types.Message, state: FSMContext):
     await message.answer(
         "‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
         reply_markup=get_main_kb(message.from_user.id in ADMIN_IDS)
     )
     await state.clear()

@dp.message(DepositState.waiting_for_amount)
async def process_deposit_amount(message: types.Message, state: FSMContext):
     try:
         amount_usdt = float(message.text)
         if amount_usdt <= 0:
             raise ValueError

         user_id = message.from_user.id
         success, result = await process_deposit(user_id, amount_usdt)

         if success:
             invoice_url = result['pay_url']
             invoice_id = result['invoice_id']

             await message.answer(
                 f"‚úÖ –°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω!\n"
                 f"–°—É–º–º–∞: {amount_usdt} USDT\n"
                 f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {invoice_url}\n\n"
                 "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                 reply_markup=get_main_kb(user_id in ADMIN_IDS)
             )

             # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
             asyncio.create_task(check_payment_status(user_id, invoice_id, amount_usdt))
         else:
             await message.answer(
                 f"‚ùå –û—à–∏–±–∫–∞: {result}",
                 reply_markup=get_main_kb(user_id in ADMIN_IDS)
             )
     except ValueError:
         await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
         return

     await state.clear()

async def check_payment_status(user_id: int, invoice_id: int, amount_usdt: float):
     max_attempts = 30  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫
     attempt = 0

     while attempt < max_attempts:
         await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

         invoice_data = await check_invoice_status(invoice_id)

         if not invoice_data.get('ok', False):
             print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—á–µ—Ç–∞ {invoice_id}: {invoice_data.get('error', {}).get('name')}")
             attempt += 1
             continue

         invoice_status = invoice_data['result']['items'][0]['status']

         if invoice_status == 'paid':
             # –ó–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
             amount_zb = int(amount_usdt / ZB_EXCHANGE_RATE)
             users[user_id]['balance'] += amount_zb

             try:
                 await bot.send_message(
                     user_id,
                     f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount_zb} Zebranium!"
                 )
             except Exception as e:
                 print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

             return

         elif invoice_status in ['expired', 'cancelled']:
             try:
                 await bot.send_message(
                     user_id,
                     f"‚ùå –°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É {amount_usdt} USDT –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫."
                 )
             except Exception:
                 pass
             return

         attempt += 1

     # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª—Å—è –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
     try:
         await bot.send_message(
             user_id,
             f"‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∏—Å—Ç–µ–∫–ª–æ. –ï—Å–ª–∏ –≤—ã –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –æ–ø–ª–∞—Ç—É, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
         )
     except Exception:
         pass

@dp.callback_query(F.data == "withdraw_funds")
async def withdraw_funds_handler(callback: types.CallbackQuery, state: FSMContext):
     user_id = callback.from_user.id
     user_data = users.get(user_id, {})
     balance = user_data.get('balance', 0)
     max_withdraw_zb = int(balance)
     max_withdraw_usdt = max_withdraw_zb * ZB_EXCHANGE_RATE

     await callback.message.answer(
         f"üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n\n"
         f"–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: {max_withdraw_zb} Zebranium (‚âà{max_withdraw_usdt:.2f} USDT)\n"
         f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAWAL} USDT\n\n"
         f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É Zebranium –¥–ª—è –≤—ã–≤–æ–¥–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
         reply_markup=ReplyKeyboardMarkup(
             keyboard=[[KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞")]],
             resize_keyboard=True
         )
     )
     await state.set_state(WithdrawState.waiting_for_amount)
     await callback.answer()

@dp.message(WithdrawState.waiting_for_amount, F.text == "üîô –û—Ç–º–µ–Ω–∞")
async def cancel_withdrawal(message: types.Message, state: FSMContext):
     await message.answer(
         "‚ùå –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–º–µ–Ω–µ–Ω.",
         reply_markup=get_main_kb(message.from_user.id in ADMIN_IDS)
     )
     await state.clear()

@dp.message(WithdrawState.waiting_for_amount)
async def process_withdrawal_amount(message: types.Message, state: FSMContext):
     try:
         amount_zb = int(message.text)
         if amount_zb <= 0:
             raise ValueError

         user_id = message.from_user.id
         success, result = await process_withdrawal(user_id, amount_zb)

         if success:
             await message.answer(
                 f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount_zb} Zebranium (‚âà{amount_zb * ZB_EXCHANGE_RATE:.2f} USDT) –ø—Ä–∏–Ω—è—Ç!\n"
                 f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {result}",
                 reply_markup=get_main_kb(user_id in ADMIN_IDS)
             )
         else:
             await message.answer(
                 f"‚ùå –û—à–∏–±–∫–∞: {result}",
                 reply_markup=get_main_kb(user_id in ADMIN_IDS)
             )
     except ValueError:
         await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
         return

     await state.clear()

@dp.message(F.text == "üë•–†–µ—Ñ–µ—Ä–∞–ª—ã")
@check_not_blocked
async def referrals_handler(message: types.Message, **kwargs):
     user_id = message.from_user.id
     bot_username = (await bot.get_me()).username
     link = f"https://t.me/{bot_username}?start={user_id}"
     count = len(users.get(user_id, {}).get("referrals", []))
     await message.answer(
         f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}\n\n"
         f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}\n\n"
         f"üíé –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {REFERRAL_REWARD} Zebranium –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!"
     )

@dp.message(F.text == "‚õèÔ∏è–ú–∞–π–Ω–∏–Ω–≥")
@check_not_blocked
async def mining_handler(message: types.Message, **kwargs):
     user_id = message.from_user.id
     if user_id not in users:
         await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
         return

     user_data = users[user_id]
     now = datetime.now()

     if user_data['last_mine_time']:
         last_mine = datetime.strptime(user_data['last_mine_time'], '%d.%m.%Y %H:%M')
         delta = now - last_mine
         if delta.total_seconds() < MINING_COOLDOWN:
             wait_time = MINING_COOLDOWN - delta.total_seconds()
             hours = int(wait_time // 3600)
             minutes = int((wait_time % 3600) // 60)
             await message.answer(
                 f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –º–∞–π–Ω–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑: {hours} —á–∞—Å. {minutes} –º–∏–Ω.\n"
                 f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']} Zebranium"
             )
             return

     reward = random.randint(*MINING_REWARD_RANGE)
     users[user_id]['balance'] += reward
     users[user_id]['last_mine_time'] = now.strftime('%d.%m.%Y %H:%M')

     await message.answer(
         f"‚õè –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±—ã–ª–∏ {reward} Zebranium!\n"
         f"üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']} ZB\n"
         f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –º–∞–π–Ω–∏–Ω–≥ —á–µ—Ä–µ–∑ 1 —á–∞—Å"
     )

@dp.message(F.text == "üíº–ó–∞–¥–∞–Ω–∏—è")
@check_not_blocked
async def tasks_handler(message: types.Message, **kwargs):
     if not tasks:
         await message.answer("üì≠ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
         return

     tasks_list = "\n".join([f"‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ {num}" for num in sorted(tasks.keys())])
     await message.answer(
         f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n{tasks_list}\n\n"
         "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
         reply_markup=get_tasks_kb()
     )

@dp.message(F.text == "üìà–¢–æ–ø—ã")
@check_not_blocked
async def tops_handler(message: types.Message, **kwargs):
     await message.answer("üèÜ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–∞:", reply_markup=get_tops_type_kb())

@dp.message(F.text == "üèÜ –¢–æ–ø—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π")
@check_not_blocked
async def referral_top_type(message: types.Message, state: FSMContext, **kwargs):
     await message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=get_period_kb())
     await state.set_state(TopStates.waiting_referral_period)

@dp.message(F.text == "üèÜ –¢–æ–ø—ã –∑–∞–¥–∞–Ω–∏–π")
@check_not_blocked
async def tasks_top_type(message: types.Message, state: FSMContext, **kwargs):
     await message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=get_period_kb())
     await state.set_state(TopStates.waiting_task_period)

@dp.message(TopStates.waiting_referral_period, F.text.in_(["üìÖ –¢–æ–ø –Ω–µ–¥–µ–ª–∏", "üìÖ –¢–æ–ø –º–µ—Å—è—Ü–∞"]))
@check_not_blocked
async def referral_top_period(message: types.Message, state: FSMContext, **kwargs):
     period = "week" if "–Ω–µ–¥–µ–ª–∏" in message.text else "month"
     top_text = await get_referral_top(period)
     await message.answer(top_text, reply_markup=get_tops_type_kb())
     await state.clear()

@dp.message(TopStates.waiting_task_period, F.text.in_(["üìÖ –¢–æ–ø –Ω–µ–¥–µ–ª–∏", "üìÖ –¢–æ–ø –º–µ—Å—è—Ü–∞"]))
@check_not_blocked
async def tasks_top_period(message: types.Message, state: FSMContext, **kwargs):
     period = "week" if "–Ω–µ–¥–µ–ª–∏" in message.text else "month"
     top_text = await get_tasks_top(period)
     await message.answer(top_text, reply_markup=get_tops_type_kb())
     await state.clear()

@dp.message(F.text.regexp(r'^–ó–∞–¥–∞–Ω–∏–µ \d+$'))
@check_not_blocked
async def show_task(message: types.Message, **kwargs):
     try:
         task_num = int(message.text.split()[1])
         task = tasks.get(task_num)

         if not task:
             await message.answer(f"‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ {task_num} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
             return

         response = f"üìå –ó–∞–¥–∞–Ω–∏–µ {task_num}\n\n{task['text']}"

         if task.get('photo'):
             await message.answer_photo(
                 task['photo'],
                 caption=response,
                 reply_markup=get_task_kb(task_num)
             )
         else:
             await message.answer(
                 response,
                 reply_markup=get_task_kb(task_num)
             )

     except Exception:
         await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏—è.")

@dp.message(F.text.regexp(r'^‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ \d+$'))
@check_not_blocked
async def task_complete_handler(message: types.Message, state: FSMContext, **kwargs):
     try:
         task_num = int(message.text.split()[-1])

         if task_num not in tasks:
             await message.answer(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ {task_num} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
             return

         await message.answer(
             "üìé –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:",
             reply_markup=ReplyKeyboardMarkup(
                 keyboard=[[KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞")]],
                 resize_keyboard=True
             )
         )
         await state.update_data(task_num=task_num)
         await state.set_state(TaskStates.waiting_for_proof)

     except Exception:
         await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.message(TaskStates.waiting_for_proof, F.photo)
async def process_task_proof(message: types.Message, state: FSMContext, **kwargs):
     data = await state.get_data()
     task_num = data['task_num']
     user_id = message.from_user.id
     username = users.get(user_id, {}).get('username', '–Ω–µ—Ç username')

     pending_approvals[(user_id, task_num)] = {
         'photo': message.photo[-1].file_id,
         'date': datetime.now()
     }

     proof_keyboard = InlineKeyboardMarkup(inline_keyboard=[
         [
             InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{user_id}_{task_num}"),
             InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}_{task_num}")
         ]
     ])

     for admin_id in ADMIN_IDS:
         try:
             await bot.send_photo(
                 admin_id,
                 photo=message.photo[-1].file_id,
                 caption=f"üÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ {task_num}!",
                 reply_markup=proof_keyboard
             )
         except Exception:
             pass

     await message.answer(
         "‚úÖ –í–∞—à–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!",
         reply_markup=get_main_kb(user_id in ADMIN_IDS)
     )
     await state.clear()

@dp.message(TaskStates.waiting_for_proof, F.text == "üîô –û—Ç–º–µ–Ω–∞")
async def cancel_proof_upload(message: types.Message, state: FSMContext, **kwargs):
     await message.answer(
         "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
         reply_markup=get_main_kb(message.from_user.id in ADMIN_IDS)
     )
     await state.clear()

@dp.callback_query(F.data.startswith("accept_"))
async def accept_proof(callback: types.CallbackQuery, **kwargs):
     if callback.from_user.id not in ADMIN_IDS:
         await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
         return

     _, user_id_str, task_num_str = callback.data.split('_')
     user_id = int(user_id_str)
     task_num = int(task_num_str)

     if (user_id, task_num) not in pending_approvals:
         await callback.answer("‚ö†Ô∏è –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
         return

     proof_data = pending_approvals.pop((user_id, task_num))
     task_proofs[user_id][task_num] = proof_data['photo']
     task_completion_dates[user_id][task_num] = proof_data['date']

     reward = random.randint(*TASK_REWARD_RANGE)
     if user_id in users:
         users[user_id]['balance'] += reward

     try:
         await bot.send_message(
             user_id,
             f"üéâ –í–∞—à–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_num} –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ!\n"
             f"üíé –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} Zebranium!"
         )
     except Exception:
         pass

     await callback.answer("‚úÖ –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –ø—Ä–∏–Ω—è—Ç–æ!")
     await callback.message.edit_reply_markup(reply_markup=None)

@dp.callback_query(F.data.startswith("reject_"))
async def reject_proof(callback: types.CallbackQuery, **kwargs):
     if callback.from_user.id not in ADMIN_IDS:
         await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
         return

     _, user_id_str, task_num_str = callback.data.split('_')
     user_id = int(user_id_str)
     task_num = int(task_num_str)

     if (user_id, task_num) not in pending_approvals:
         await callback.answer("‚ö†Ô∏è –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
         return

     pending_approvals.pop((user_id, task_num))

     try:
         await bot.send_message(
             user_id,
             f"‚ùå –í–∞—à–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_num} –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
         )
     except Exception:
         pass

     await callback.answer("‚ùå –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!")
     await callback.message.edit_reply_markup(reply_markup=None)

@dp.message(F.text == "‚úâÔ∏è–ü–æ–º–æ—â—å")
@check_not_blocked
async def help_handler(message: types.Message, **kwargs):
     await message.answer(
         "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n\n"
         "‚Ä¢ üëÄ–ü—Ä–æ—Ñ–∏–ª—å - –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ\n"
         "‚Ä¢ üë•–†–µ—Ñ–µ—Ä–∞–ª—ã - –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞\n"
         "‚Ä¢ ‚õèÔ∏è–ú–∞–π–Ω–∏–Ω–≥ - –¥–æ–±—ã—á–∞ Zebranium –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç\n"
         "‚Ä¢ üíº–ó–∞–¥–∞–Ω–∏—è - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –∑–∞ –Ω–∞–≥—Ä–∞–¥—É\n"
         "‚Ä¢ üìà–¢–æ–ø—ã - —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
         "–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ.\n\n"
         "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
     )

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
@check_not_blocked
async def back_handler(message: types.Message, state: FSMContext, **kwargs):
     current_state = await state.get_state()

     if current_state in [TopStates.waiting_referral_period, TopStates.waiting_task_period]:
         await message.answer("üèÜ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–∞:", reply_markup=get_tops_type_kb())
         await state.set_state(TopStates.waiting_top_type)
     else:
         is_admin = message.from_user.id in ADMIN_IDS
         await message.answer("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_kb(is_admin))
         await state.clear()

@dp.message(F.text == "üëë–ê–¥–º–∏–Ω–∫–∞")
async def admin_panel(message: types.Message, **kwargs):
     if message.from_user.id not in ADMIN_IDS:
         await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
         return

     await message.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_kb())

@dp.message(F.text == "üíº –ó–∞–¥–∞–Ω–∏—è")
async def tasks_admin_menu(message: types.Message, **kwargs):
     if message.from_user.id not in ADMIN_IDS:
         return

     await message.answer("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏:", reply_markup=get_tasks_admin_kb())

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
async def add_task_start(message: types.Message, state: FSMContext, **kwargs):
     if message.from_user.id not in ADMIN_IDS:
         return

     await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
     await state.set_state(AddTaskState.waiting_for_task_number)

@dp.message(AddTaskState.waiting_for_task_number)
async def process_task_number(message: types.Message, state: FSMContext, **kwargs):
     try:
         task_num = int(message.text)
         if task_num <= 0:
             raise ValueError
         if task_num in tasks:
             await message.answer(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ {task_num} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
             return
     except ValueError:
         await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
         return

     await state.update_data(task_num=task_num)
     await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:")
     await state.set_state(AddTaskState.waiting_for_task_text)

@dp.message(AddTaskState.waiting_for_task_text)
async def process_task_text(message: types.Message, state: FSMContext, **kwargs):
     if not message.text:
         await message.answer("‚ùå –¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
         return

     await state.update_data(text=message.text)
     await message.answer(
         "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
         reply_markup=ReplyKeyboardMarkup(
             keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
             resize_keyboard=True
         )
     )
     await state.set_state(AddTaskState.waiting_for_task_photo)

@dp.message(AddTaskState.waiting_for_task_photo, F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_task_photo(message: types.Message, state: FSMContext, **kwargs):
     data = await state.get_data()
     tasks[data['task_num']] = {
         'text': data['text'],
         'photo': None
     }
     await message.answer(
         f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ {data['task_num']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
         reply_markup=get_admin_kb()
     )
     await state.clear()

@dp.message(AddTaskState.waiting_for_task_photo, F.photo)
async def add_task_with_photo(message: types.Message, state: FSMContext, **kwargs):
     data = await state.get_data()
     tasks[data['task_num']] = {
         'text': data['text'],
         'photo': message.photo[-1].file_id
     }
     await message.answer(
         f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ {data['task_num']} —Å —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
         reply_markup=get_admin_kb()
     )
     await state.clear()

@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
async def delete_task_start(message: types.Message, state: FSMContext, **kwargs):
     if message.from_user.id not in ADMIN_IDS:
         return

     if not tasks:
         await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
         return

     tasks_list = "\n".join([f"–ó–∞–¥–∞–Ω–∏–µ {num}" for num in sorted(tasks.keys())])
     await message.answer(
         f"üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π:\n{tasks_list}\n\n"
         "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
     )
     await state.set_state(DeleteTaskState.waiting_for_task_number)

@dp.message(DeleteTaskState.waiting_for_task_number)
async def delete_task_process(message: types.Message, state: FSMContext, **kwargs):
     try:
         task_num = int(message.text)
         if task_num not in tasks:
             await message.answer(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ {task_num} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
             return

         del tasks[task_num]

         # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
         for user_id in task_proofs:
             if task_num in task_proofs[user_id]:
                 del task_proofs[user_id][task_num]
             if task_num in task_completion_dates[user_id]:
                 del task_completion_dates[user_id][task_num]

         # –£–¥–∞–ª—è–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
         keys_to_delete = [key for key in pending_approvals.keys() if key[1] == task_num]
         for key in keys_to_delete:
             del pending_approvals[key]

         await message.answer(
             f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ {task_num} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!",
             reply_markup=get_admin_kb()
         )
     except ValueError:
         await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è.")
     await state.clear()

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats_handler(message: types.Message, **kwargs):
     if message.from_user.id not in ADMIN_IDS:
         return

     completed_tasks = sum(len(proofs) for proofs in task_proofs.values())
     total_balance = sum(user.get('balance', 0) for user in users.values())

     await message.answer(
         f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
         f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
         f"üí∞ –í—Å–µ–≥–æ Zebranium: {total_balance}\n"
         f"üìù –ó–∞–¥–∞–Ω–∏–π: {len(tasks)}\n"
         f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completed_tasks}\n"
         f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {len(blocked_users)}\n"
         f"‚è≥ –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(pending_approvals)}"
     )

@dp.message(F.text == "üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
async def export_users_data(message: types.Message, **kwargs):
     if message.from_user.id not in ADMIN_IDS:
         return

     if not users:
         await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
         return

     try:
         data = []
         for user_id, user_data in users.items():
             completed_tasks = task_proofs.get(user_id, {})
             task_dates = [
                 task_completion_dates.get(user_id, {}).get(task_num, datetime.min).strftime('%d.%m.%Y %H:%M')
                 for task_num in completed_tasks
             ]

             data.append({
                 "ID": user_id,
                 "Username": f"@{user_data.get('username', '‚Äî')}",
                 "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏": user_data.get('reg_date', '‚Äî'),
                 "–ë–∞–ª–∞–Ω—Å ZB": user_data.get('balance', 0),
                 "–†–µ—Ñ–µ—Ä–∞–ª–æ–≤": len(user_data.get('referrals', [])),
                 "–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π": len(completed_tasks),
                 "–ù–æ–º–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏–π": ", ".join(map(str, completed_tasks.keys())) if completed_tasks else "‚Äî",
                 "–î–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è": "; ".join(task_dates) if task_dates else "‚Äî",
                 "–°—Ç–∞—Ç—É—Å": "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user_id in blocked_users else "–ê–∫—Ç–∏–≤–µ–Ω"
             })

         df = pd.DataFrame(data)

         excel_buffer = io.BytesIO()
         with pd.ExcelWriter(excel_buffer, engine='xlsxwriter') as writer:
             df.to_excel(writer, index=False, sheet_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')

             workbook = writer.book
             worksheet = writer.sheets['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏']

             column_widths = {
                 'A:A': 12,
                 'B:B': 20,
                 'C:C': 20,
                 'D:D': 15,
                 'E:E': 10,
                 'F:F': 15,
                 'G:G': 20,
                 'H:H': 30,
                 'I:I': 12
             }

             for cols, width in column_widths.items():
                 worksheet.set_column(cols, width)

             header_format = workbook.add_format({'bold': True})
             for col_num, value in enumerate(df.columns.values):
                 worksheet.write(0, col_num, value, header_format)

         excel_buffer.seek(0)

         await message.answer_document(
             BufferedInputFile(
                 excel_buffer.getvalue(),
                 filename="users_export.xlsx"
             ),
             caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
         )

     except Exception as e:
         await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

@dp.message(F.text == "üßæ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def users_list_handler(message: types.Message, **kwargs):
     if message.from_user.id not in ADMIN_IDS:
         return

     if not users:
         await message.answer("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
         return

     text = "üßæ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
     for uid, data in users.items():
         completed = len(task_proofs.get(uid, {}))
         text += f"{uid} - @{data.get('username', '‚Äî')} (üí∞ {data.get('balance', 0)} ZB | ‚úÖ {completed})\n"

     for i in range(0, len(text), 4000):
         await message.answer(text[i:i+4000])

@dp.message(F.text == "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")
async def block_user_start(message: types.Message, state: FSMContext, **kwargs):
     if message.from_user.id not in ADMIN_IDS:
         return

     await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
     await state.set_state(BlockState.waiting_for_id)

@dp.message(BlockState.waiting_for_id)
async def block_user_process(message: types.Message, state: FSMContext, **kwargs):
     try:
         user_id = int(message.text)
     except ValueError:
         await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.")
         await state.clear()
         return

     blocked_users.add(user_id)
     await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
     await state.clear()

@dp.message(F.text == "üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")
async def unblock_user_start(message: types.Message, state: FSMContext, **kwargs):
     if message.from_user.id not in ADMIN_IDS:
         return

     await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
     await state.set_state(UnblockState.waiting_for_id)

@dp.message(UnblockState.waiting_for_id)
async def unblock_user_process(message: types.Message, state: FSMContext, **kwargs):
     try:
         user_id = int(message.text)
     except ValueError:
         await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.")
         await state.clear()
         return

     if user_id in blocked_users:
         blocked_users.remove(user_id)
         await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
     else:
         await message.answer(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
     await state.clear()

@dp.message(F.text == "üì® –†–∞—Å—Å—ã–ª–∫–∞")
async def broadcast_start(message: types.Message, state: FSMContext, **kwargs):
     if message.from_user.id not in ADMIN_IDS:
         return

     await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
     await state.set_state(BroadcastState.waiting_for_message)

@dp.message(BroadcastState.waiting_for_message)
async def broadcast_process(message: types.Message, state: FSMContext, **kwargs):
     text = message.text
     success = 0
     errors = 0

     for user_id in users:
         try:
             await bot.send_message(user_id, text)
             success += 1
         except Exception:
             errors += 1

     await message.answer(
         f"üì® –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
         f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
         f"‚ùå –û—à–∏–±–æ–∫: {errors}"
     )
     await state.clear()

@dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def edit_user_start(message: types.Message, state: FSMContext, **kwargs):
     if message.from_user.id not in ADMIN_IDS:
         return

     await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
     await state.set_state(EditUserState.waiting_for_id)

@dp.message(EditUserState.waiting_for_id)
async def process_user_id(message: types.Message, state: FSMContext, **kwargs):
     try:
         user_id = int(message.text)
     except ValueError:
         await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.")
         await state.clear()
         return

     if user_id not in users:
         await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
         await state.clear()
         return

     await state.update_data(user_id=user_id)
     await message.answer(
         f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}\n"
         f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
         reply_markup=get_edit_user_kb()
     )
     await state.set_state(EditUserState.waiting_for_field)

@dp.message(EditUserState.waiting_for_field, F.text.in_(["üí∞ –ë–∞–ª–∞–Ω—Å", "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π"]))
async def process_edit_field(message: types.Message, state: FSMContext, **kwargs):
     field_map = {
         "üí∞ –ë–∞–ª–∞–Ω—Å": "balance",
         "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã": "referrals",
         "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π": "completed_tasks"
     }

     await state.update_data(field=field_map[message.text])
     await message.answer(
         f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {message.text.lower()}:",
         reply_markup=ReplyKeyboardMarkup(
             keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
             resize_keyboard=True
         )
     )
     await state.set_state(EditUserState.waiting_for_value)

@dp.message(EditUserState.waiting_for_field, F.text == "üîô –ù–∞–∑–∞–¥")
async def back_from_edit_user(message: types.Message, state: FSMContext, **kwargs):
     await message.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_kb())
     await state.clear()

@dp.message(EditUserState.waiting_for_value, F.text == "üîô –ù–∞–∑–∞–¥")
async def back_from_edit_value(message: types.Message, state: FSMContext, **kwargs):
     data = await state.get_data()
     await message.answer(
         f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {data['user_id']}\n"
         f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
         reply_markup=get_edit_user_kb()
     )
     await state.set_state(EditUserState.waiting_for_field)

@dp.message(EditUserState.waiting_for_value)
async def process_edit_value(message: types.Message, state: FSMContext, **kwargs):
     data = await state.get_data()
     user_id = data['user_id']
     field = data['field']

     try:
         if field == "balance":
             new_value = int(message.text)
             users[user_id]['balance'] = new_value
         elif field == "referrals":
             new_value = int(message.text)
             users[user_id]['referrals'] = [0] * new_value
         elif field == "completed_tasks":
             new_value = int(message.text)

             # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
             if user_id in task_proofs:
                 del task_proofs[user_id]
             if user_id in task_completion_dates:
                 del task_completion_dates[user_id]

             # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è
             if new_value > 0:
                 available_tasks = sorted(tasks.keys())
                 tasks_to_add = min(new_value, len(available_tasks))

                 task_proofs[user_id] = {}
                 task_completion_dates[user_id] = {}

                 for task_num in available_tasks[:tasks_to_add]:
                     task_proofs[user_id][task_num] = "manually_added_by_admin"
                     task_completion_dates[user_id][task_num] = datetime.now().strftime('%d.%m.%Y %H:%M')

         await message.answer(
             f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
             reply_markup=get_admin_kb()
         )
         await state.clear()
     except ValueError:
         await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

# =====================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –¢–û–ü–û–í
# =====================

async def get_referral_top(period: str = "week") -> str:
     now = datetime.now()

     if period == "week":
         start_date = now - timedelta(days=7)
     else:  # month
         start_date = now - timedelta(days=30)

     top_users = []
     for user_id, user_data in users.items():
         referral_count = 0
         for ref_id in user_data.get('referrals', []):
             if ref_id in users and 'reg_date' in users[ref_id]:
                 try:
                     ref_reg_date = datetime.strptime(users[ref_id]['reg_date'], '%d.%m.%Y %H:%M')
                     if ref_reg_date >= start_date:
                         referral_count += 1
                 except ValueError:
                     continue
         if referral_count > 0:
             username = user_data.get('username', '‚Äî')
             top_users.append((user_id, referral_count, username))

     top_users.sort(key=lambda x: x[1], reverse=True)

     if not top_users:
         return "üèÜ –¢–æ–ø –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –ø—É—Å—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."

     result = f"üèÜ –¢–æ–ø –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∑–∞ {'–Ω–µ–¥–µ–ª—é' if period == 'week' else '–º–µ—Å—è—Ü'}:\\n\\n"
     for i, (user_id, count, username) in enumerate(top_users[:10], 1):
         result += f"{i}. @{username} (ID: {user_id}) - {count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\\n"

     return result

async def get_tasks_top(period: str = "week") -> str:
     now = datetime.now()

     if period == "week":
         start_date = now - timedelta(days=7)
     else:  # month
         start_date = now - timedelta(days=30)

     top_users = []
     for user_id, user_tasks in task_completion_dates.items():
         count = 0
         for task_num, task_date in user_tasks.items():
             # task_date –º–æ–∂–µ—Ç –±—ã—Ç—å datetime object –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π
             if isinstance(task_date, datetime):
                 if task_date >= start_date:
                     count += 1
             elif isinstance(task_date, str):
                 try:
                     date_obj = datetime.strptime(task_date, '%d.%m.%Y %H:%M')
                     if date_obj >= start_date:
                         count += 1
                 except ValueError:
                     continue

         if count > 0:
             username = users.get(user_id, {}).get('username', '‚Äî')
             top_users.append((user_id, count, username))

     top_users.sort(key=lambda x: x[1], reverse=True)

     if not top_users:
         return "üèÜ –¢–æ–ø –∑–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."

     result = f"üèÜ –¢–æ–ø –∑–∞–¥–∞–Ω–∏–π –∑–∞ {'–Ω–µ–¥–µ–ª—é' if period == 'week' else '–º–µ—Å—è—Ü'}:\\n\\n"
     for i, (user_id, count, username) in enumerate(top_users[:10], 1):
         result += f"{i}. @{username} (ID: {user_id}) - {count} –∑–∞–¥–∞–Ω–∏–π\\n"

     return result

# =====================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê –ò –í–ï–ë-–°–ï–†–í–ï–†–ê
# =====================

async def run_bot():
     while True:
         try:
             logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
             await dp.start_polling(bot, skip_updates=True)
         except TelegramForbiddenError as e:
             logging.error(f"–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ –æ—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
             # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ —Ç.–¥.
             await asyncio.sleep(60) # –ü–æ–¥–æ–∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
         except Exception as e:
             logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
             await asyncio.sleep(5) # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º

async def fake_server(request):
    """
    –ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã Render –≤–∏–¥–µ–ª –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç.
    """
    return web.Response(text="Bot is running and listening for Telegram updates!")

async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    port = int(os.environ.get("PORT", 8080)) # Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT
    app = web.Application()
    app.router.add_get("/", fake_server)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', port)
    logging.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    await site.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await run_bot() # run_bot —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")
