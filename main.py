import asyncio
import random
import pandas as pd
import io
import logging
from datetime import datetime, timedelta, timezone
from collections import defaultdict
import os
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
import requests

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –±–æ—Ç–∞
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BufferedInputFile
)
from aiogram.filters import CommandStart, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramForbiddenError
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL
import asyncpg

# --- –ù–ê–°–¢–†–û–ô–ö–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê (–ß—Ç–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è) ---
API_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
if not API_TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è.")
    exit(1) # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω

DATABASE_URL = os.environ.get("DATABASE_URL")
if not DATABASE_URL:
    logger.error("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    exit(1)

ADMIN_IDS_STR = os.environ.get("ADMIN_IDS")
# –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ ADMIN_IDS: —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
ADMIN_IDS = [int(x.strip()) for x in ADMIN_IDS_STR.split(',') if x.strip()] if ADMIN_IDS_STR else []
if not ADMIN_IDS:
    logger.warning("ADMIN_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

CRYPTO_BOT_TOKEN = os.environ.get("CRYPTO_BOT_API_TOKEN")
if not CRYPTO_BOT_TOKEN:
    logger.warning("CRYPTO_BOT_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –§—É–Ω–∫—Ü–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è/–≤—ã–≤–æ–¥–∞ —á–µ—Ä–µ–∑ Crypto Bot –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã.")


# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê –ò –î–ò–°–ü–ï–¢–ß–ï–†–ê ---
bot = Bot(API_TOKEN, parse_mode='HTML') # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
dp = Dispatcher(storage=MemoryStorage())

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ò –ù–ê–°–¢–†–û–ô–ö–ò ---
maintenance_mode = False # –†–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
min_withdrawal_amount_btc = 0.0001
min_withdrawal_amount_usdt = 5.0 # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ USDT
min_withdrawal_amount_trc20 = 5.0 # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ TRC20 (–µ—Å–ª–∏ TRC20 –Ω–µ USDT)

# --- –°–û–°–¢–û–Ø–ù–ò–Ø FSM (Finite State Machine) ---
class Form(StatesGroup):
    task_id = State()
    proof_text = State()
    proof_photo = State()
    withdrawal_amount = State()
    withdrawal_address = State()
    withdrawal_currency = State()
    admin_send_message = State()
    admin_send_photo = State()
    admin_send_text = State()
    waiting_for_task_name = State()
    waiting_for_task_description = State()
    waiting_for_task_reward = State()
    waiting_for_delete_task_number = State()
    waiting_for_task_id_for_approve = State()
    waiting_for_proof_photo_for_approve = State()


class WithdrawState(StatesGroup):
    waiting_for_amount = State()
    waiting_for_address = State()
    waiting_for_currency = State()

class AdminAddTaskState(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_reward = State()

class DeleteTaskState(StatesGroup):
    waiting_for_task_number = State()

class ApproveTaskState(StatesGroup):
    waiting_for_proof_id = State()
    waiting_for_admin_decision = State()

class AdminBroadcastState(StatesGroup):
    waiting_for_message = State()


# --- –§–ï–ô–ö–û–í–´–ô –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø RENDER.COM ---
# –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã Render –Ω–µ —Ä—É–≥–∞–ª—Å—è
def run_fake_server():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b'Bot is running!')

    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(('0.0.0.0', port), Handler)
    logger.info(f"Fake web server running on 0.0.0.0:{port}")
    server.serve_forever()

# –ó–∞–ø—É—Å–∫ —Ñ–µ–π–∫–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
# –≠—Ç–æ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–≤–∞–ª—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–º –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
server_thread = threading.Thread(target=run_fake_server)
server_thread.daemon = True # –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ—Ç–æ–∫—É –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
server_thread.start()


# --- –î–ï–ö–û–†–ê–¢–û–† –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö –ò –†–ï–ñ–ò–ú–ê –¢–ï–•. –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø ---
def error_handler_decorator(func):
    async def wrapper(message: types.Message, *args, **kwargs):
        if maintenance_mode and message.from_user.id not in ADMIN_IDS:
            await message.answer("üõ†Ô∏è –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        try:
            return await func(message, *args, **kwargs)
        except TelegramForbiddenError:
            logger.error(f"–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}.")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –∏–ª–∏ –æ—Ç–º–µ—Ç–∫–∏ –µ–≥–æ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ
        except Exception as e:
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ {func.__name__}: {e}", exc_info=True)
            if message.from_user.id in ADMIN_IDS:
                await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
            else:
                await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
    return wrapper

# --- –§–£–ù–ö–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• ---
async def get_db_pool():
    if not hasattr(get_db_pool, 'pool'):
        get_db_pool.pool = await asyncpg.create_pool(DATABASE_URL)
    return get_db_pool.pool

async def init_db():
    conn = None
    try:
        pool = await get_db_pool()
        async with pool.acquire() as conn:
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    username TEXT,
                    reg_date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    balance REAL DEFAULT 0.0,
                    last_mine_time TIMESTAMP WITH TIME ZONE,
                    referral_count INTEGER DEFAULT 0, -- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç —Å—Ç–æ–ª–±–µ—Ü –µ—Å—Ç—å!
                    referrer_id BIGINT,
                    invited_users TEXT DEFAULT '[]',
                    mining_level INTEGER DEFAULT 1,
                    mining_income REAL DEFAULT 0.001,
                    last_bonus_time TIMESTAMP WITH TIME ZONE,
                    invited_by_link TEXT,
                    btc_address TEXT,
                    trc20_address TEXT,
                    usdt_balance REAL DEFAULT 0.0
                );
            ''')
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS mining_upgrades (
                    user_id BIGINT PRIMARY KEY REFERENCES users(user_id) ON DELETE CASCADE,
                    level INTEGER DEFAULT 1,
                    price REAL DEFAULT 0.0,
                    income REAL DEFAULT 0.001,
                    last_upgrade_time TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                );
            ''')
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS tasks (
                    task_id SERIAL PRIMARY KEY,
                    task_name TEXT NOT NULL,
                    task_description TEXT NOT NULL,
                    reward REAL NOT NULL,
                    status TEXT DEFAULT 'active'
                );
            ''')
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS completed_tasks (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
                    task_id INTEGER NOT NULL REFERENCES tasks(task_id) ON DELETE CASCADE,
                    completion_date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    UNIQUE (user_id, task_id)
                );
            ''')
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS task_proofs (
                    proof_id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
                    task_id INTEGER NOT NULL REFERENCES tasks(task_id) ON DELETE CASCADE,
                    proof_text TEXT,
                    proof_photo_id TEXT,
                    submission_date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    status TEXT DEFAULT 'pending'
                );
            ''')
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS withdrawals (
                    withdrawal_id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
                    amount REAL NOT NULL,
                    currency TEXT NOT NULL, -- BTC, USDT, TRC20
                    address TEXT NOT NULL,
                    request_date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    status TEXT DEFAULT 'pending' -- pending, approved, rejected
                );
            ''')
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        exit(1)

async def db_add_user(user_id: int, username: str, referrer_id: int = None, invited_by_link: str = None):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        await conn.execute('''
            INSERT INTO users(user_id, username, reg_date, balance, last_mine_time, referrer_id, invited_by_link)
            VALUES($1, $2, NOW(), 0.0, NULL, $3, $4)
            ON CONFLICT (user_id) DO NOTHING
        ''', user_id, username, referrer_id, invited_by_link)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}, username: {username}, referrer: {referrer_id}")

        if referrer_id:
            # –î–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ referrer_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            referrer_exists = await conn.fetchval("SELECT user_id FROM users WHERE user_id = $1", referrer_id)
            if referrer_exists:
                await conn.execute('''
                    UPDATE users
                    SET referral_count = referral_count + 1,
                        invited_users = invited_users || $1::jsonb
                    WHERE user_id = $2
                ''', f'[{user_id}]', referrer_id)
                logger.info(f"–£–≤–µ–ª–∏—á–µ–Ω–æ referral_count –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id}.")
            else:
                logger.warning(f"–†–µ—Ñ–µ—Ä–µ—Ä {referrer_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


async def db_get_user(user_id: int):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        # –î–æ–±–∞–≤–ª–µ–Ω referral_count –≤ SELECT –∑–∞–ø—Ä–æ—Å
        row = await conn.fetchrow("SELECT user_id, username, reg_date, balance, last_mine_time, referral_count, referrer_id, invited_users, mining_level, mining_income, last_bonus_time, invited_by_link, btc_address, trc20_address, usdt_balance FROM users WHERE user_id = $1", user_id)
        if row:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º row –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            user_data = dict(row)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ last_mine_time –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—â–µ –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏)
            if 'last_mine_time' in user_data and isinstance(user_data['last_mine_time'], str):
                try:
                    user_data['last_mine_time'] = datetime.strptime(user_data['last_mine_time'], '%Y-%m-%d %H:%M:%S UTC').replace(tzinfo=timezone.utc)
                except ValueError:
                    user_data['last_mine_time'] = datetime.strptime(user_data['last_mine_time'], '%Y-%m-%d %H:%M:%S').replace(tzinfo=timezone.utc)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ last_bonus_time
            if 'last_bonus_time' in user_data and isinstance(user_data['last_bonus_time'], str):
                try:
                    user_data['last_bonus_time'] = datetime.strptime(user_data['last_bonus_time'], '%Y-%m-%d %H:%M:%S UTC').replace(tzinfo=timezone.utc)
                except ValueError:
                    user_data['last_bonus_time'] = datetime.strptime(user_data['last_bonus_time'], '%Y-%m-%d %H:%M:%S').replace(tzinfo=timezone.utc)
            return user_data
        return None

async def db_update_user_balance(user_id: int, amount: float):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        new_balance = await conn.fetchval("UPDATE users SET balance = balance + $1 WHERE user_id = $2 RETURNING balance", amount, user_id)
        logger.info(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {amount}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")
        return new_balance

async def db_update_user_last_mine_time(user_id: int, mine_time: datetime):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        await conn.execute("UPDATE users SET last_mine_time = $1 WHERE user_id = $2", mine_time.astimezone(timezone.utc), user_id)
        logger.info(f"–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞–π–Ω–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {mine_time.isoformat()}")

async def db_update_user_username(user_id: int, username: str):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        await conn.execute("UPDATE users SET username = $1 WHERE user_id = $2", username, user_id)
        logger.info(f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {username}.")

async def db_get_all_users_ids():
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        rows = await conn.fetch("SELECT user_id FROM users")
        return [row['user_id'] for row in rows]

async def db_get_referrals_count(user_id: int):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –∏–∑ `referral_count` –≤ `users`
        count = await conn.fetchval("SELECT referral_count FROM users WHERE user_id = $1", user_id)
        return count if count is not None else 0

async def db_get_user_mining_upgrade(user_id: int):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        row = await conn.fetchrow("SELECT level, income, price, last_upgrade_time FROM mining_upgrades WHERE user_id = $1", user_id)
        if row:
            upgrade_data = dict(row)
            if 'last_upgrade_time' in upgrade_data and isinstance(upgrade_data['last_upgrade_time'], str):
                try:
                    upgrade_data['last_upgrade_time'] = datetime.strptime(upgrade_data['last_upgrade_time'], '%Y-%m-%d %H:%M:%S UTC').replace(tzinfo=timezone.utc)
                except ValueError:
                    upgrade_data['last_upgrade_time'] = datetime.strptime(upgrade_data['last_upgrade_time'], '%Y-%m-%d %H:%M:%S').replace(tzinfo=timezone.utc)
            return upgrade_data
        return None

async def db_update_user_mining_upgrade(user_id: int, level: int, income: float, price: float):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º INSERT ... ON CONFLICT UPDATE –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        await conn.execute('''
            INSERT INTO mining_upgrades(user_id, level, income, price, last_upgrade_time)
            VALUES($1, $2, $3, $4, NOW())
            ON CONFLICT (user_id) DO UPDATE
            SET level = $2, income = $3, price = $4, last_upgrade_time = NOW()
        ''', user_id, level, income, price)
        logger.info(f"–£—Ä–æ–≤–µ–Ω—å –º–∞–π–Ω–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è {level}.")

async def db_update_user_btc_address(user_id: int, address: str):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        await conn.execute("UPDATE users SET btc_address = $1 WHERE user_id = $2", address, user_id)
        logger.info(f"BTC –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {address}")

async def db_update_user_trc20_address(user_id: int, address: str):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        await conn.execute("UPDATE users SET trc20_address = $1 WHERE user_id = $2", address, user_id)
        logger.info(f"TRC20 –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {address}")

async def db_update_user_usdt_balance(user_id: int, amount: float):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        new_balance = await conn.fetchval("UPDATE users SET usdt_balance = usdt_balance + $1 WHERE user_id = $2 RETURNING usdt_balance", amount, user_id)
        logger.info(f"USDT –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {amount}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")
        return new_balance

async def db_add_task(task_name: str, task_description: str, reward: float):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        task_id = await conn.fetchval('''
            INSERT INTO tasks(task_name, task_description, reward)
            VALUES($1, $2, $3)
            RETURNING task_id
        ''', task_name, task_description, reward)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {task_name} —Å ID {task_id}")
        return task_id

async def db_get_active_tasks():
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        rows = await conn.fetch("SELECT task_id, task_name, task_description, reward FROM tasks WHERE status = 'active'")
        return [dict(row) for row in rows]

async def db_get_task(task_id: int):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        row = await conn.fetchrow("SELECT task_id, task_name, task_description, reward, status FROM tasks WHERE task_id = $1", task_id)
        return dict(row) if row else None

async def db_delete_task(task_id: int):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        await conn.execute("DELETE FROM tasks WHERE task_id = $1", task_id)
        logger.info(f"–ó–∞–¥–∞–Ω–∏–µ —Å ID {task_id} —É–¥–∞–ª–µ–Ω–æ.")

async def db_set_task_status(task_id: int, status: str):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        await conn.execute("UPDATE tasks SET status = $1 WHERE task_id = $2", status, task_id)
        logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è {task_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {status}.")

async def db_add_completed_task(user_id: int, task_id: int):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        try:
            await conn.execute('''
                INSERT INTO completed_tasks(user_id, task_id, completion_date)
                VALUES($1, $2, NOW())
            ''', user_id, task_id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ—Ç–∏–ª –∑–∞–¥–∞–Ω–∏–µ {task_id} –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ.")
            return True
        except asyncpg.exceptions.UniqueViolationError:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ {task_id}.")
            return False

async def db_has_completed_task(user_id: int, task_id: int):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        count = await conn.fetchval("SELECT COUNT(*) FROM completed_tasks WHERE user_id = $1 AND task_id = $2", user_id, task_id)
        return count > 0

async def db_get_user_completed_tasks(user_id: int):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        rows = await conn.fetch("SELECT task_id, completion_date FROM completed_tasks WHERE user_id = $1")
        return [dict(row) for row in rows]

async def db_add_task_proof(user_id: int, task_id: int, proof_text: str = None, proof_photo_id: str = None):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        proof_id = await conn.fetchval('''
            INSERT INTO task_proofs(user_id, task_id, proof_text, proof_photo_id, submission_date, status)
            VALUES($1, $2, $3, $4, NOW(), 'pending')
            RETURNING proof_id
        ''', user_id, task_id, proof_text, proof_photo_id)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. Proof ID: {proof_id}")
        return proof_id

async def db_get_pending_proofs():
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        rows = await conn.fetch("SELECT proof_id, user_id, task_id, proof_text, proof_photo_id, submission_date FROM task_proofs WHERE status = 'pending'")
        return [dict(row) for row in rows]

async def db_set_proof_status(proof_id: int, status: str):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        await conn.execute("UPDATE task_proofs SET status = $1 WHERE proof_id = $2", status, proof_id)
        logger.info(f"–°—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è {proof_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {status}.")

async def db_get_proof(proof_id: int):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        row = await conn.fetchrow("SELECT proof_id, user_id, task_id, proof_text, proof_photo_id, submission_date, status FROM task_proofs WHERE proof_id = $1", proof_id)
        return dict(row) if row else None

async def db_add_withdrawal_request(user_id: int, amount: float, currency: str, address: str):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        withdrawal_id = await conn.fetchval('''
            INSERT INTO withdrawals(user_id, amount, currency, address, request_date, status)
            VALUES($1, $2, $3, $4, NOW(), 'pending')
            RETURNING withdrawal_id
        ''', user_id, amount, currency, address)
        logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount} {currency} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –∞–¥—Ä–µ—Å {address}. ID: {withdrawal_id}")
        return withdrawal_id

async def db_get_pending_withdrawals():
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        rows = await conn.fetch("SELECT withdrawal_id, user_id, amount, currency, address, request_date FROM withdrawals WHERE status = 'pending'")
        return [dict(row) for row in rows]

async def db_set_withdrawal_status(withdrawal_id: int, status: str):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        await conn.execute("UPDATE withdrawals SET status = $1 WHERE withdrawal_id = $2", status, withdrawal_id)
        logger.info(f"–°—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞ {withdrawal_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {status}.")

async def db_get_total_completed_tasks_count(user_id: int):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        count = await conn.fetchval("SELECT COUNT(*) FROM task_proofs WHERE user_id = $1 AND status = 'approved'", user_id)
        return count if count is not None else 0

async def db_get_all_users_data():
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        rows = await conn.fetch("SELECT user_id, username, reg_date, balance, last_mine_time, referral_count, referrer_id, invited_users, mining_level, mining_income, last_bonus_time, invited_by_link, btc_address, trc20_address, usdt_balance FROM users")
        return [dict(row) for row in rows]

async def db_get_all_tasks_data():
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        rows = await conn.fetch("SELECT task_id, task_name, task_description, reward, status FROM tasks")
        return [dict(row) for row in rows]

async def db_get_all_task_proofs_data():
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        rows = await conn.fetch("SELECT proof_id, user_id, task_id, proof_text, proof_photo_id, submission_date, status FROM task_proofs")
        return [dict(row) for row in rows]

async def db_get_all_withdrawals_data():
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        rows = await conn.fetch("SELECT withdrawal_id, user_id, amount, currency, address, request_date, status FROM withdrawals")
        return [dict(row) for row in rows]

async def db_update_user_bonus_time(user_id: int, bonus_time: datetime):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        await conn.execute("UPDATE users SET last_bonus_time = $1 WHERE user_id = $2", bonus_time.astimezone(timezone.utc), user_id)
        logger.info(f"–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {bonus_time.isoformat()}")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Crypto Bot API ---
async def crypto_bot_create_invoice(asset: str, amount: float, user_id: int, description: str):
    if not CRYPTO_BOT_TOKEN:
        logger.error("CRYPTO_BOT_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å.")
        return None

    url = "https://pay.crypt.bot/api/createInvoice"
    headers = {
        "Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN
    }
    payload = {
        "asset": asset,
        "amount": str(amount),
        "description": description,
        "payload": str(user_id),
        "allow_anonymous": True,
        "allow_comments": True,
        "expires_in": 3600 # 1 —á–∞—Å
    }
    try:
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status() # –í—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è HTTP –æ—à–∏–±–æ–∫
        json_response = response.json()
        logger.info(f"Crypto Bot API Response (createInvoice): {json_response}")
        if json_response.get("ok"):
            return json_response["result"]
        else:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ Crypto Bot: {json_response.get('error')}")
            return None
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Crypto Bot API (createInvoice): {e}")
        return None

async def crypto_bot_get_invoices(invoice_ids: list):
    if not CRYPTO_BOT_TOKEN:
        logger.error("CRYPTO_BOT_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–æ–π—Å—ã.")
        return []

    url = "https://pay.crypt.bot/api/getInvoices"
    headers = {
        "Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN
    }
    params = {
        "invoice_ids": ",".join(map(str, invoice_ids))
    }
    try:
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        json_response = response.json()
        logger.info(f"Crypto Bot API Response (getInvoices for {invoice_ids}): {json_response}")
        if json_response.get("ok"):
            return json_response["result"]["items"]
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–æ–π—Å–æ–≤ Crypto Bot: {json_response.get('error')}")
            return []
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Crypto Bot API (getInvoices): {e}")
        return []

async def crypto_bot_get_balance():
    if not CRYPTO_BOT_TOKEN:
        logger.error("CRYPTO_BOT_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å.")
        return None
    url = "https://pay.crypt.bot/api/getBalance"
    headers = {
        "Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN
    }
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        json_response = response.json()
        if json_response.get("ok"):
            return {item['asset']: item['available'] for item in json_response['result']}
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ Crypto Bot: {json_response.get('error')}")
            return None
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Crypto Bot API (getBalance): {e}")
        return None


# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
def get_main_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üíé –ú–∞–π–Ω–∏–Ω–≥"), KeyboardButton(text="üöÄ –ó–∞–¥–∞–Ω–∏—è")],
            [KeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã"), KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å")],
            [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

def get_balance_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å"), KeyboardButton(text="‚ûñ –í—ã–≤–µ—Å—Ç–∏")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

def get_admin_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="‚úçÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ")],
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"), KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")],
            [KeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è"), KeyboardButton(text="üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–≤–æ–¥")],
            [KeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

def get_tasks_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚û°Ô∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"), KeyboardButton(text="–ú–æ–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è")],
            [KeyboardButton(text="üèÜ –¢–æ–ø –∑–∞–¥–∞–Ω–∏–π")],
            [KeyboardButton(text:"‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

def get_tasks_admin_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"), KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

def get_mining_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚õèÔ∏è –ù–∞—á–∞—Ç—å –º–∞–π–Ω–∏–Ω–≥"), KeyboardButton(text="üìà –£–ª—É—á—à–∏—Ç—å –º–∞–π–Ω–µ—Ä")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

def get_settings_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å BTC –∫–æ—à–µ–ª–µ–∫")],
            [KeyboardButton(text="üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å TRC20 –∫–æ—à–µ–ª–µ–∫")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

def get_admin_settings_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîß –¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ –í–∫–ª"), KeyboardButton(text="üîß –¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ –í—ã–∫–ª")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

def get_withdrawal_currency_kb():
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="USDT", callback_data="withdraw_usdt"))
    builder.add(InlineKeyboardButton(text="BTC", callback_data="withdraw_btc"))
    builder.add(InlineKeyboardButton(text="TRC20", callback_data="withdraw_trc20"))
    return builder.as_markup()

def get_admin_decision_kb(proof_id: int):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_proof_{proof_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_proof_{proof_id}")
    )
    return builder.as_markup()

def get_admin_withdrawal_decision_kb(withdrawal_id: int):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_withdrawal_{withdrawal_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_withdrawal_{withdrawal_id}")
    )
    return builder.as_markup()

def get_back_to_main_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True # –ß–∞—Å—Ç–æ —É–¥–æ–±–Ω–æ, —á—Ç–æ–±—ã –æ–Ω–∞ —Å–∫—Ä—ã–≤–∞–ª–∞—Å—å –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    )

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ---

@dp.message(CommandStart(deep_link=True))
@error_handler_decorator
async def cmd_start_deep_link(message: types.Message, command: CommandObject):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name
    referrer_id = None
    invited_by_link = None

    if command.args:
        try:
            referrer_id = int(command.args)
            if referrer_id == user_id: # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º –¥–ª—è —Å–∞–º–æ–≥–æ —Å–µ–±—è
                referrer_id = None
            else:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç {referrer_id}")
        except ValueError:
            invited_by_link = command.args
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏—à–µ–ª –ø–æ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—Å—ã–ª–∫–µ: {invited_by_link}")

    await db_add_user(user_id, username, referrer_id, invited_by_link)

    start_message = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}!\n\n"
        "–Ø –≤–∞—à Crypto Bot –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞ –∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ."
    )
    await message.answer(start_message, reply_markup=get_main_kb())

@dp.message(CommandStart())
@error_handler_decorator
async def cmd_start_no_deep_link(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name
    await db_add_user(user_id, username)

    start_message = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}!\n\n"
        "–Ø –≤–∞—à Crypto Bot –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞ –∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ."
    )
    await message.answer(start_message, reply_markup=get_main_kb())


@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
@error_handler_decorator
async def go_back(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_kb())

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
@error_handler_decorator
async def go_back_to_admin(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=get_admin_kb())

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ---

@dp.message(F.text == "üíé –ú–∞–π–Ω–∏–Ω–≥")
@error_handler_decorator
async def mining_menu(message: types.Message):
    user = await db_get_user(message.from_user.id)
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ /start.", reply_markup=get_main_kb())
        return

    mining_info = await db_get_user_mining_upgrade(message.from_user.id)
    current_level = mining_info['level'] if mining_info else user['mining_level']
    current_income = mining_info['income'] if mining_info else user['mining_income']

    text = (
        "<b>üíé –ú–∞–π–Ω–∏–Ω–≥</b>\n\n"
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –º–∞–π–Ω–∏–Ω–≥–∞: <b>{current_level}</b>\n"
        f"–î–æ—Ö–æ–¥ –≤ —á–∞—Å: <b>{current_income:.6f} BTC</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await message.answer(text, reply_markup=get_mining_kb())

@dp.message(F.text == "‚õèÔ∏è –ù–∞—á–∞—Ç—å –º–∞–π–Ω–∏–Ω–≥")
@error_handler_decorator
async def start_mining(message: types.Message):
    user_id = message.from_user.id
    user = await db_get_user(user_id)
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ /start.", reply_markup=get_main_kb())
        return

    last_mine_time = user.get('last_mine_time')
    current_income = user.get('mining_income', 0.001)

    now_utc = datetime.now(timezone.utc)

    if last_mine_time:
        # –ï—Å–ª–∏ last_mine_time - –Ω–∞–∏–≤–Ω–∞—è –¥–∞—Ç–∞, —Å–¥–µ–ª–∞–µ–º –µ—ë –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ–π –æ UTC
        if last_mine_time.tzinfo is None:
            last_mine_time = last_mine_time.replace(tzinfo=timezone.utc)
        
        time_since_last_mine = now_utc - last_mine_time
        if time_since_last_mine < timedelta(hours=1):
            remaining_time = timedelta(hours=1) - time_since_last_mine
            minutes = int(remaining_time.total_seconds() // 60)
            seconds = int(remaining_time.total_seconds() % 60)
            await message.answer(f"‚è≥ –í—ã —Å–º–æ–∂–µ—Ç–µ –º–∞–π–Ω–∏—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω. {seconds} —Å–µ–∫.")
            return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥
    # –î–æ—Ö–æ–¥ –∑–∞ —á–∞—Å * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ (–∏–ª–∏ 1 —á–∞—Å, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —á–∞—Å–∞)
    earned_amount = current_income # –°–µ–π—á–∞—Å –≤—Å–µ–≥–¥–∞ –∑–∞ 1 —á–∞—Å
    await db_update_user_balance(user_id, earned_amount)
    await db_update_user_last_mine_time(user_id, now_utc)

    await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–º–∞–π–Ω–∏–ª–∏ <b>{earned_amount:.6f} BTC</b>. –í–∞—à –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω.", reply_markup=get_mining_kb())


@dp.message(F.text == "üìà –£–ª—É—á—à–∏—Ç—å –º–∞–π–Ω–µ—Ä")
@error_handler_decorator
async def upgrade_miner(message: types.Message):
    user_id = message.from_user.id
    user = await db_get_user(user_id)
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ /start.", reply_markup=get_main_kb())
        return

    current_level = user.get('mining_level', 1)
    current_income = user.get('mining_income', 0.001)
    user_balance = user.get('balance', 0.0)

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –Ω–æ–≤–æ–≥–æ –¥–æ—Ö–æ–¥–∞
    next_level = current_level + 1
    upgrade_cost = current_level * 0.0005 # –ü—Ä–∏–º–µ—Ä: 1 -> 0.0005, 2 -> 0.001, 3 -> 0.0015
    new_income = current_income + 0.0001 # –ü—Ä–∏–º–µ—Ä: 0.001 -> 0.0011 -> 0.0012

    if user_balance < upgrade_cost:
        await message.answer(f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BTC –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞. –î–ª—è —É—Ä–æ–≤–Ω—è {next_level} —Ç—Ä–µ–±—É–µ—Ç—Å—è {upgrade_cost:.6f} BTC.")
        return

    # –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
    await db_update_user_balance(user_id, -upgrade_cost) # –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    await db_update_user_mining_upgrade(user_id, next_level, new_income, upgrade_cost)
    # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ users —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏, —Ö–æ—Ç—è mining_upgrades - –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        await conn.execute("UPDATE users SET mining_level = $1, mining_income = $2 WHERE user_id = $3", next_level, new_income, user_id)

    await message.answer(
        f"‚úÖ –í–∞—à –º–∞–π–Ω–µ—Ä —É–ª—É—á—à–µ–Ω –¥–æ <b>—É—Ä–æ–≤–Ω—è {next_level}</b>!\n"
        f"–ù–æ–≤—ã–π –¥–æ—Ö–æ–¥ –≤ —á–∞—Å: <b>{new_income:.6f} BTC</b>.\n"
        f"–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ: <b>{upgrade_cost:.6f} BTC</b>."
    )


@dp.message(F.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã")
@error_handler_decorator
async def referrals_menu(message: types.Message):
    user_id = message.from_user.id
    user = await db_get_user(user_id)
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ /start.", reply_markup=get_main_kb())
        return

    referral_count = await db_get_referrals_count(user_id)
    referral_link = f"https://t.me/{bot.me.username}?start={user_id}"

    text = (
        "<b>üë• –†–µ—Ñ–µ—Ä–∞–ª—ã</b>\n\n"
        f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>{referral_link}</code>\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{referral_count}</b>\n\n"
        "–î–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
    )
    await message.answer(text, reply_markup=get_main_kb())


@dp.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
@error_handler_decorator
async def balance_menu(message: types.Message):
    user_id = message.from_user.id
    user = await db_get_user(user_id)
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ /start.", reply_markup=get_main_kb())
        return

    btc_balance = user.get('balance', 0.0)
    usdt_balance = user.get('usdt_balance', 0.0)

    text = (
        "<b>üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å:</b>\n\n"
        f"BTC: <b>{btc_balance:.6f}</b>\n"
        f"USDT (TRC20): <b>{usdt_balance:.2f}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await message.answer(text, reply_markup=get_balance_kb())


@dp.message(F.text == "‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å")
@error_handler_decorator
async def deposit_menu(message: types.Message):
    if not CRYPTO_BOT_TOKEN:
        await message.answer("–§—É–Ω–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=get_balance_kb())
        return

    user_id = message.from_user.id
    description = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"

    # –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ –Ω–∞ 0.1 USDT
    invoice = await crypto_bot_create_invoice(asset="USDT", amount=0.1, user_id=user_id, description=description)

    if invoice and 'mini_app_invoice_url' in invoice: # –ò—Å–ø–æ–ª—å–∑—É–µ–º mini_app_invoice_url
        mini_app_url = invoice['mini_app_invoice_url']
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=mini_app_url))
        await message.answer(
            f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ USDT (TRC20) –Ω–∞ 0.1 USDT, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n\n"
            f"üîó <a href='{mini_app_url}'>–û–ø–ª–∞—Ç–∏—Ç—å 0.1 USDT</a>\n\n"
            "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞—à –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω.",
            reply_markup=keyboard.as_markup(),
            disable_web_page_preview=True
        )
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–Ω–≤–æ–π—Å {invoice['invoice_id']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_balance_kb())


@dp.message(F.text == "‚ûñ –í—ã–≤–µ—Å—Ç–∏")
@error_handler_decorator
async def withdraw_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = await db_get_user(user_id)
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ /start.", reply_markup=get_main_kb())
        return

    btc_balance = user.get('balance', 0.0)
    usdt_balance = user.get('usdt_balance', 0.0)
    btc_address = user.get('btc_address')
    trc20_address = user.get('trc20_address') # TRC20_address –¥–ª—è USDT TRC20

    text = (
        "<b>‚ûñ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å BTC: <b>{btc_balance:.6f}</b>\n"
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å USDT (TRC20): <b>{usdt_balance:.2f}</b>\n\n"
        f"–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π BTC –∫–æ—à–µ–ª–µ–∫: <code>{btc_address if btc_address else '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}</code>\n"
        f"–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π TRC20 –∫–æ—à–µ–ª–µ–∫: <code>{trc20_address if trc20_address else '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}</code>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –≤ –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞:"
    )
    await message.answer(text, reply_markup=get_withdrawal_currency_kb())
    await state.set_state(WithdrawState.waiting_for_currency)

@dp.callback_query(WithdrawState.waiting_for_currency, F.data.startswith("withdraw_"))
@error_handler_decorator
async def withdraw_currency_selected(callback_query: types.CallbackQuery, state: FSMContext):
    currency = callback_query.data.split('_')[1].upper()
    user_id = callback_query.from_user.id
    user = await db_get_user(user_id)
    await callback_query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"

    if not user:
        await bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ /start.", reply_markup=get_main_kb())
        await state.clear()
        return

    min_amount = 0
    balance = 0
    address = None

    if currency == "BTC":
        balance = user.get('balance', 0.0)
        min_amount = min_withdrawal_amount_btc
        address = user.get('btc_address')
        currency_display = "BTC"
    elif currency == "USDT" or currency == "TRC20": # USDT TRC20
        balance = user.get('usdt_balance', 0.0)
        min_amount = min_withdrawal_amount_usdt if currency == "USDT" else min_withdrawal_amount_trc20 # –ï—Å–ª–∏ —É –≤–∞—Å —Ä–∞–∑–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è USDT –∏ TRC20
        address = user.get('trc20_address') # –ê–¥—Ä–µ—Å TRC20 –¥–ª—è –≤—ã–≤–æ–¥–∞ USDT/TRC20
        currency_display = "USDT (TRC20)"
    else:
        await bot.send_message(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.", reply_markup=get_balance_kb())
        await state.clear()
        return

    if not address:
        await bot.send_message(user_id,
            f"‚ùå –£ –≤–∞—Å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ {currency_display}. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–≤—è–∂–∏—Ç–µ –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'.",
            reply_markup=get_settings_kb() # –í–æ–∑–º–æ–∂–Ω–æ, –ª—É—á—à–µ main_kb, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        )
        await state.clear()
        return

    await state.update_data(withdrawal_currency=currency, withdrawal_address=address)
    await state.set_state(WithdrawState.waiting_for_amount)
    await bot.send_message(
        user_id,
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ {currency_display}. –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance:.6f if currency == 'BTC' else balance:.2f}</b>.\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: <b>{min_amount:.6f if currency == 'BTC' else min_amount:.2f}</b>.",
        reply_markup=get_back_to_main_kb() # –ú–æ–∂–Ω–æ –¥–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    )

@dp.message(WithdrawState.waiting_for_amount)
@error_handler_decorator
async def withdraw_amount_received(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = await state.get_data()
    currency = user_data['withdrawal_currency']
    address = user_data['withdrawal_address']

    try:
        amount = float(message.text)
    except ValueError:
        await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    user = await db_get_user(user_id)
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ /start.", reply_markup=get_main_kb())
        await state.clear()
        return

    balance = user.get('balance', 0.0) if currency == "BTC" else user.get('usdt_balance', 0.0)
    min_amount = min_withdrawal_amount_btc if currency == "BTC" else (min_withdrawal_amount_usdt if currency == "USDT" else min_withdrawal_amount_trc20)

    if amount <= 0:
        await message.answer("‚ùå –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    if amount < min_amount:
        await message.answer(f"‚ùå –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ {min_amount:.6f if currency == 'BTC' else min_amount:.2f} {currency}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    if amount > balance:
        await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –£ –≤–∞—Å: {balance:.6f if currency == 'BTC' else balance:.2f} {currency}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥
    withdrawal_id = await db_add_withdrawal_request(user_id, amount, currency, address)

    # –í—ã—á–∏—Ç–∞–µ–º –∏–∑ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–∞–∑—É
    if currency == "BTC":
        await db_update_user_balance(user_id, -amount)
    elif currency == "USDT" or currency == "TRC20":
        await db_update_user_usdt_balance(user_id, -amount)

    await message.answer(
        f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount:.6f if currency == 'BTC' else amount:.2f} {currency} –Ω–∞ –∞–¥—Ä–µ—Å <code>{address}</code> —Å–æ–∑–¥–∞–Ω (ID: {withdrawal_id}).\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=get_balance_kb()
    )
    await state.clear()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id,
                f"üîî –ù–û–í–´–ô –ó–ê–ü–†–û–° –ù–ê –í–´–í–û–î!\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (ID: {user_id})\n"
                f"–°—É–º–º–∞: {amount:.6f if currency == 'BTC' else amount:.2f} {currency}\n"
                f"–ê–¥—Ä–µ—Å: <code>{address}</code>\n"
                f"ID –∑–∞–ø—Ä–æ—Å–∞: {withdrawal_id}",
                reply_markup=get_admin_withdrawal_decision_kb(withdrawal_id)
            )
        except TelegramForbiddenError:
            logger.warning(f"–ê–¥–º–∏–Ω {admin_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞ {admin_id} –æ –≤—ã–≤–æ–¥–µ: {e}")

@dp.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
@error_handler_decorator
async def info_menu(message: types.Message):
    info_text = (
        "<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º '–º–∞–π–Ω–∏—Ç—å' –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤.\n\n"
        "üíé <b>–ú–∞–π–Ω–∏–Ω–≥</b>: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ—Ö–æ–¥ —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏. –í—ã –º–æ–∂–µ—Ç–µ —É–ª—É—á—à–∞—Ç—å —Å–≤–æ–π –º–∞–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏.\n"
        "üöÄ <b>–ó–∞–¥–∞–Ω–∏—è</b>: –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã.\n"
        "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—ã</b>: –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–≤–æ–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã.\n"
        "üí∞ <b>–ë–∞–ª–∞–Ω—Å</b>: –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏/–≤—ã–≤–æ–¥–∞–º–∏.\n\n"
        "<b>–ü—Ä–∞–≤–∏–ª–∞ –∏ —É—Å–ª–æ–≤–∏—è:</b>\n"
        "1. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –≤–∏–¥—ã –Ω–∞–∫—Ä—É—Ç–∫–∏ –∏–ª–∏ –æ–±–º–∞–Ω–∞.\n"
        "2. –í—Å–µ –≤—ã–ø–ª–∞—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –°—Ä–æ–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–≥—É—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
        "3. –í —Å–ª—É—á–∞–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω.\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @UsernameAdmin" # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –∞–¥–º–∏–Ω–∞
    )
    await message.answer(info_text, reply_markup=get_main_kb())

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
@error_handler_decorator
async def settings_menu(message: types.Message):
    user_id = message.from_user.id
    user = await db_get_user(user_id)
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ /start.", reply_markup=get_main_kb())
        return

    btc_address = user.get('btc_address')
    trc20_address = user.get('trc20_address')

    text = (
        "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        f"–í–∞—à –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π BTC –∫–æ—à–µ–ª–µ–∫: <code>{btc_address if btc_address else '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}</code>\n"
        f"–í–∞—à –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π TRC20 –∫–æ—à–µ–ª–µ–∫: <code>{trc20_address if trc20_address else '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}</code>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await message.answer(text, reply_markup=get_settings_kb())

@dp.message(F.text == "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å BTC –∫–æ—à–µ–ª–µ–∫")
@error_handler_decorator
async def link_btc_wallet(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à BTC –∞–¥—Ä–µ—Å (–¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤):", reply_markup=get_back_to_main_kb())
    await state.set_state(Form.btc_address)

@dp.message(Form.btc_address)
@error_handler_decorator
async def process_btc_address(message: types.Message, state: FSMContext):
    btc_address = message.text.strip()
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
    if len(btc_address) < 26 or len(btc_address) > 35: # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ BTC –∞–¥—Ä–µ—Å–∞
        await message.answer("‚ùå –ü–æ—Ö–æ–∂–µ –Ω–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π BTC –∞–¥—Ä–µ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    await db_update_user_btc_address(message.from_user.id, btc_address)
    await message.answer(f"‚úÖ –í–∞—à BTC –∫–æ—à–µ–ª–µ–∫ <code>{btc_address}</code> —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!", reply_markup=get_settings_kb())
    await state.clear()

@dp.message(F.text == "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å TRC20 –∫–æ—à–µ–ª–µ–∫")
@error_handler_decorator
async def link_trc20_wallet(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à TRC20 –∞–¥—Ä–µ—Å (–¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ USDT TRC20):", reply_markup=get_back_to_main_kb())
    await state.set_state(Form.trc20_address)

@dp.message(Form.trc20_address)
@error_handler_decorator
async def process_trc20_address(message: types.Message, state: FSMContext):
    trc20_address = message.text.strip()
    # TRC20 –∞–¥—Ä–µ—Å–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 'T' –∏ –∏–º–µ—é—Ç –¥–ª–∏–Ω—É 34 —Å–∏–º–≤–æ–ª–∞
    if not trc20_address.startswith('T') or len(trc20_address) != 34:
        await message.answer("‚ùå –ü–æ—Ö–æ–∂–µ –Ω–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π TRC20 –∞–¥—Ä–µ—Å (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'T' –∏ –±—ã—Ç—å 34 —Å–∏–º–≤–æ–ª–∞). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    await db_update_user_trc20_address(message.from_user.id, trc20_address)
    await message.answer(f"‚úÖ –í–∞—à TRC20 –∫–æ—à–µ–ª–µ–∫ <code>{trc20_address}</code> —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!", reply_markup=get_settings_kb())
    await state.clear()


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ó–ê–î–ê–ù–ò–ô ---

@dp.message(F.text == "üöÄ –ó–∞–¥–∞–Ω–∏—è")
@error_handler_decorator
async def tasks_menu(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –∑–∞–¥–∞–Ω–∏–π! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_tasks_kb())

@dp.message(F.text == "‚û°Ô∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ") # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–∫–∏
@error_handler_decorator
async def start_task_completion(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    active_tasks = await db_get_active_tasks()
    user_completed_tasks = await db_get_user_completed_tasks(user_id)
    completed_task_ids = {task['task_id'] for task in user_completed_tasks}

    available_tasks = [
        task for task in active_tasks
        if task['task_id'] not in completed_task_ids
    ]

    if not available_tasks:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_tasks_kb())
        await state.clear()
        return

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:\n\n"
    keyboard_builder = InlineKeyboardBuilder()

    for task in available_tasks:
        text += (
            f"<b>–ó–∞–¥–∞–Ω–∏–µ #{task['task_id']}: {task['task_name']}</b>\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {task['task_description']}\n"
            f"–ù–∞–≥—Ä–∞–¥–∞: <b>{task['reward']:.2f} BTC</b>\n\n"
        )
        keyboard_builder.add(InlineKeyboardButton(text=f"–í—ã–±—Ä–∞—Ç—å #{task['task_id']}", callback_data=f"select_task_{task['task_id']}"))

    keyboard_builder.adjust(2) # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    await message.answer(text, reply_markup=keyboard_builder.as_markup())
    await state.set_state(Form.task_id)


@dp.callback_query(Form.task_id, F.data.startswith("select_task_"))
@error_handler_decorator
async def process_selected_task(callback_query: types.CallbackQuery, state: FSMContext):
    task_id = int(callback_query.data.split('_')[2])
    user_id = callback_query.from_user.id
    await callback_query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query

    task = await db_get_task(task_id)
    if not task or task['status'] != 'active':
        await bot.send_message(user_id, "‚ùå –≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        await state.clear()
        return

    if await db_has_completed_task(user_id, task_id):
        await bot.send_message(user_id, "–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Ä–∞–Ω–µ–µ.")
        await state.clear()
        return

    await state.update_data(task_id=task_id)
    await bot.send_message(
        user_id,
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ #{task_id}: <b>{task['task_name']}</b>.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç –∏/–∏–ª–∏ —Ñ–æ—Ç–æ):",
        reply_markup=get_back_to_main_kb()
    )
    await state.set_state(Form.proof_text)


@dp.message(Form.proof_text)
@error_handler_decorator
async def process_proof_text(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_tasks_kb())
        return

    proof_text = message.text
    user_data = await state.get_data()
    task_id = user_data['task_id']

    await state.update_data(proof_text=proof_text)
    await message.answer("–¢–µ–ø–µ—Ä—å, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ):", reply_markup=get_back_to_main_kb())
    await state.set_state(Form.proof_photo)

@dp.message(Form.proof_photo, F.photo | F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥") # –ú–æ–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ñ–æ—Ç–æ –ò–õ–ò –∫–æ–º–∞–Ω–¥—É "–ù–∞–∑–∞–¥"
@error_handler_decorator
async def process_proof_photo(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        user_data = await state.get_data()
        task_id = user_data['task_id']
        proof_text = user_data.get('proof_text')
        proof_photo_id = None # –ù–µ—Ç —Ñ–æ—Ç–æ

        proof_id = await db_add_task_proof(user_id, task_id, proof_text=proof_text, proof_photo_id=proof_photo_id)
        await message.answer(
            f"‚úÖ –í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è #{task_id} (ID: {proof_id}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.",
            reply_markup=get_tasks_kb()
        )
        await state.clear()
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
        await notify_admins_new_proof(proof_id, user_id, task_id)
        return

    if message.photo:
        proof_photo_id = message.photo[-1].file_id # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        user_data = await state.get_data()
        task_id = user_data['task_id']
        proof_text = user_data.get('proof_text')

        proof_id = await db_add_task_proof(user_id, task_id, proof_text=proof_text, proof_photo_id=proof_photo_id)
        await message.answer(
            f"‚úÖ –í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è #{task_id} (ID: {proof_id}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.",
            reply_markup=get_tasks_kb()
        )
        await state.clear()
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
        await notify_admins_new_proof(proof_id, user_id, task_id)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")


@dp.message(F.text == "–ú–æ–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è")
@error_handler_decorator
async def show_my_completed_tasks(message: types.Message):
    user_id = message.from_user.id
    completed_tasks = await db_get_user_completed_tasks(user_id)

    if not completed_tasks:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.", reply_markup=get_tasks_kb())
        return

    text = "<b>–í–∞—à–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:</b>\n\n"
    for comp_task in completed_tasks:
        task_info = await db_get_task(comp_task['task_id'])
        if task_info:
            completion_date_str = comp_task['completion_date'].strftime('%d.%m.%Y %H:%M') if comp_task['completion_date'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            text += f"‚ñ™Ô∏è <b>{task_info['task_name']}</b> (ID: {task_info['task_id']})\n"
            text += f"   <i>–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completion_date_str}</i>\n"
            text += f"   <i>–ù–∞–≥—Ä–∞–¥–∞: {task_info['reward']:.2f} BTC</i>\n\n"
        else:
            text += f"‚ñ™Ô∏è –ó–∞–¥–∞–Ω–∏–µ —Å ID {comp_task['task_id']} (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)\n"

    await message.answer(text, reply_markup=get_tasks_kb())

@dp.message(F.text == "üèÜ –¢–æ–ø –∑–∞–¥–∞–Ω–∏–π")
@error_handler_decorator
async def top_tasks_menu(message: types.Message):
    # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–ø–∞
    # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ –∏–ª–∏ –≤—ã–≤–æ–¥ –æ–±—â–µ–π –∏–Ω—Ñ—ã
    text = (
        "<b>üèÜ –¢–æ–ø –∑–∞–¥–∞–Ω–∏–π</b>\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π."
    )
    await message.answer(text, reply_markup=get_tasks_kb())


# --- –ê–î–ú–ò–ù-–§–£–ù–ö–¶–ò–ò ---

@dp.message(F.text == "‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
@error_handler_decorator
async def admin_settings_menu(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=get_admin_settings_kb())


@dp.message(F.text == "üîß –¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ –í–∫–ª")
@error_handler_decorator
async def enable_maintenance(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    global maintenance_mode
    maintenance_mode = True
    await message.answer("‚úÖ –†–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω. –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.", reply_markup=get_admin_kb())
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤–∫–ª—é—á–∏–ª —Ä–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.")

@dp.message(F.text == "üîß –¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ –í—ã–∫–ª")
@error_handler_decorator
async def disable_maintenance(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    global maintenance_mode
    maintenance_mode = False
    await message.answer("‚úÖ –†–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω. –ë–æ—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", reply_markup=get_admin_kb())
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤—ã–∫–ª—é—á–∏–ª —Ä–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.")

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@error_handler_decorator
async def send_stats(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    users_data = await db_get_all_users_data()
    tasks_data = await db_get_all_tasks_data()
    proofs_data = await db_get_all_task_proofs_data()
    withdrawals_data = await db_get_all_withdrawals_data()

    total_users = len(users_data)
    total_balance_btc = sum(u['balance'] for u in users_data)
    total_balance_usdt = sum(u['usdt_balance'] for u in users_data)
    
    pending_proofs_count = sum(1 for p in proofs_data if p['status'] == 'pending')
    pending_withdrawals_count = sum(1 for w in withdrawals_data if w['status'] == 'pending')

    stats_text = (
        "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å BTC: {total_balance_btc:.6f}\n"
        f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å USDT (TRC20): {total_balance_usdt:.2f}\n"
        f"üöÄ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {len([t for t in tasks_data if t['status'] == 'active'])}\n"
        f"‚úÖ –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π: {pending_proofs_count}\n"
        f"üí∏ –û–∂–∏–¥–∞—é—Ç –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤: {pending_withdrawals_count}\n"
    )

    # Optional: Generate Excel reports
    output_xlsx = io.BytesIO()
    with pd.ExcelWriter(output_xlsx, engine='xlsxwriter') as writer:
        pd.DataFrame(users_data).to_excel(writer, sheet_name='Users', index=False)
        pd.DataFrame(tasks_data).to_excel(writer, sheet_name='Tasks', index=False)
        pd.DataFrame(proofs_data).to_excel(writer, sheet_name='Proofs', index=False)
        pd.DataFrame(withdrawals_data).to_excel(writer, sheet_name='Withdrawals', index=False)

    output_xlsx.seek(0)
    
    # Get Crypto Bot balance if token is set
    crypto_balances = None
    if CRYPTO_BOT_TOKEN:
        crypto_balances = await crypto_bot_get_balance()
        if crypto_balances:
            stats_text += "\n<b>–ë–∞–ª–∞–Ω—Å Crypto Bot:</b>\n"
            for asset, amount in crypto_balances.items():
                stats_text += f"- {asset}: {amount}\n"
        else:
            stats_text += "\n<i>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å Crypto Bot.</i>\n"


    await message.answer(stats_text, reply_markup=get_admin_kb())
    await bot.send_document(
        message.from_user.id,
        BufferedInputFile(output_xlsx.getvalue(), filename="bot_data.xlsx"),
        caption="–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ Excel —Ñ–∞–π–ª–µ."
    )


@dp.message(F.text == "‚úçÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ")
@error_handler_decorator
async def start_broadcast(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:", reply_markup=get_back_to_main_kb())
    await state.set_state(AdminBroadcastState.waiting_for_message)

@dp.message(AdminBroadcastState.waiting_for_message)
@error_handler_decorator
async def process_broadcast_message(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_admin_kb())
        return

    broadcast_text = message.html_text # –ò—Å–ø–æ–ª—å–∑—É–µ–º html_text –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    user_ids = await db_get_all_users_ids()
    sent_count = 0
    blocked_count = 0

    for user_id in user_ids:
        try:
            await bot.send_message(user_id, broadcast_text)
            sent_count += 1
            await asyncio.sleep(0.05) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏–º–∏—Ç–æ–≤ Telegram
        except TelegramForbiddenError:
            blocked_count += 1
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await message.answer(
        f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {blocked_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–≤–µ—Ä–æ—è—Ç–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞).",
        reply_markup=get_admin_kb()
    )
    await state.clear()


@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
@error_handler_decorator
async def admin_add_task_start(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:", reply_markup=get_back_to_main_kb())
    await state.set_state(AdminAddTaskState.waiting_for_name)

@dp.message(AdminAddTaskState.waiting_for_name)
@error_handler_decorator
async def admin_add_task_name(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_admin_kb())
        return
    await state.update_data(task_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:", reply_markup=get_back_to_main_kb())
    await state.set_state(AdminAddTaskState.waiting_for_description)

@dp.message(AdminAddTaskState.waiting_for_description)
@error_handler_decorator
async def admin_add_task_description(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_admin_kb())
        return
    await state.update_data(task_description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∑–∞–¥–∞–Ω–∏–µ (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 0.0001 BTC):", reply_markup=get_back_to_main_kb())
    await state.set_state(AdminAddTaskState.waiting_for_reward)

@dp.message(AdminAddTaskState.waiting_for_reward)
@error_handler_decorator
async def admin_add_task_reward(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_admin_kb())
        return
    try:
        reward = float(message.text)
        if reward <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–∞–≥—Ä–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    user_data = await state.get_data()
    task_name = user_data['task_name']
    task_description = user_data['task_description']

    task_id = await db_add_task(task_name, task_description, reward)
    await message.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ '{task_name}' (ID: {task_id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å –Ω–∞–≥—Ä–∞–¥–æ–π {reward:.6f} BTC.", reply_markup=get_admin_kb())
    await state.clear()


@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
@error_handler_decorator
async def admin_delete_task_start(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    active_tasks = await db_get_active_tasks()
    if not active_tasks:
        await message.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç.", reply_markup=get_admin_kb())
        return

    text = "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n\n"
    for task in active_tasks:
        text += f"ID: {task['task_id']} | –ù–∞–∑–≤–∞–Ω–∏–µ: {task['task_name']}\n"
    await message.answer(text, reply_markup=get_back_to_main_kb())
    await state.set_state(DeleteTaskState.waiting_for_task_number)

@dp.message(DeleteTaskState.waiting_for_task_number)
@error_handler_decorator
async def admin_delete_task_id(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_admin_kb())
        return
    try:
        task_id = int(message.text)
        task = await db_get_task(task_id)
        if not task:
            await message.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        await db_delete_task(task_id)
        await message.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å ID {task_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=get_admin_kb())
    except ValueError:
        await message.answer("‚ùå ID –∑–∞–¥–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        await state.clear()

@dp.message(F.text == "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è")
@error_handler_decorator
async def admin_check_proofs(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    pending_proofs = await db_get_pending_proofs()
    if not pending_proofs:
        await message.answer("–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏.", reply_markup=get_admin_kb())
        return

    proof_list_text = "<b>–ó–∞–¥–∞–Ω–∏—è, –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n\n"
    for proof in pending_proofs:
        task = await db_get_task(proof['task_id'])
        user = await db_get_user(proof['user_id'])
        username = user['username'] if user and user['username'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        task_name = task['task_name'] if task else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ'
        submission_date = proof['submission_date'].strftime('%d.%m.%Y %H:%M') if proof['submission_date'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

        proof_list_text += (
            f"<b>ID –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b> {proof['proof_id']}\n"
            f"<b>–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{username} (ID: {proof['user_id']})\n"
            f"<b>–ó–∞–¥–∞–Ω–∏–µ:</b> {task_name} (ID: {proof['task_id']})\n"
            f"<b>–¢–µ–∫—Å—Ç:</b> {proof['proof_text'] if proof['proof_text'] else '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}\n"
            f"<b>–î–∞—Ç–∞:</b> {submission_date}\n"
        )
        if proof['proof_photo_id']:
            proof_list_text += "–§–æ—Ç–æ: [—Å–º. —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]\n"
        proof_list_text += "-----------------------------------\n\n"

    await message.answer(proof_list_text)
    await asyncio.sleep(0.5) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Å–ª–∏–≤–∞–ª–∏—Å—å

    for proof in pending_proofs:
        if proof['proof_photo_id']:
            try:
                await bot.send_photo(message.from_user.id, proof['proof_photo_id'], caption=f"–§–æ—Ç–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ID: {proof['proof_id']}")
                await asyncio.sleep(0.5)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ {proof['proof_photo_id']} –∞–¥–º–∏–Ω—É {message.from_user.id}: {e}")
                await bot.send_message(message.from_user.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ID {proof['proof_id']}. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:", reply_markup=get_back_to_main_kb())
    await state.set_state(ApproveTaskState.waiting_for_proof_id)

@dp.message(ApproveTaskState.waiting_for_proof_id)
@error_handler_decorator
async def admin_process_proof_id(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏–π –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_admin_kb())
        return
    try:
        proof_id = int(message.text)
        proof = await db_get_proof(proof_id)
        if not proof or proof['status'] != 'pending':
            await message.answer("‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        user = await db_get_user(proof['user_id'])
        task = await db_get_task(proof['task_id'])
        username = user['username'] if user and user['username'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        task_name = task['task_name'] if task else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ'
        reward = task['reward'] if task else 0.0

        confirmation_text = (
            f"<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ID: {proof_id}</b>\n\n"
            f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{username} (ID: {proof['user_id']})\n"
            f"–ó–∞–¥–∞–Ω–∏–µ: {task_name} (ID: {proof['task_id']})\n"
            f"–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ: <b>{reward:.6f} BTC</b>\n"
            f"–¢–µ–∫—Å—Ç: {proof['proof_text'] if proof['proof_text'] else '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}\n"
        )
        if proof['proof_photo_id']:
            await bot.send_photo(message.from_user.id, proof['proof_photo_id'], caption=confirmation_text, reply_markup=get_admin_decision_kb(proof_id))
        else:
            await message.answer(confirmation_text, reply_markup=get_admin_decision_kb(proof_id))

        await state.set_state(ApproveTaskState.waiting_for_admin_decision)
    except ValueError:
        await message.answer("‚ùå ID –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@dp.callback_query(ApproveTaskState.waiting_for_admin_decision, F.data.startswith("approve_proof_") | F.data.startswith("reject_proof_"))
@error_handler_decorator
async def admin_decision_proof(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return

    action = callback_query.data.split('_')[0]
    proof_id = int(callback_query.data.split('_')[2])
    await callback_query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query

    proof = await db_get_proof(proof_id)
    if not proof or proof['status'] != 'pending':
        await bot.send_message(callback_query.from_user.id, "–≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        await state.clear()
        return

    user_id = proof['user_id']
    task_id = proof['task_id']
    task = await db_get_task(task_id)
    reward = task['reward'] if task else 0.0

    if action == "approve":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–µ
        if await db_has_completed_task(user_id, task_id):
            await bot.send_message(callback_query.from_user.id, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∏–º–µ–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è {task_id}. –ù–µ –Ω–∞—á–∏—Å–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
            await db_set_proof_status(proof_id, 'rejected') # –ü–æ–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –Ω–µ –≤–∏—Å–µ–ª–æ
            await bot.send_message(user_id, f"‚ùå –í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è #{task_id} –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –≤–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
            await state.clear()
            return

        await db_set_proof_status(proof_id, 'approved')
        await db_update_user_balance(user_id, reward)
        await db_add_completed_task(user_id, task_id) # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏

        await bot.send_message(callback_query.from_user.id, f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ID {proof_id} –æ–¥–æ–±—Ä–µ–Ω–æ. –ù–∞–≥—Ä–∞–¥–∞ {reward:.6f} BTC –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
        try:
            await bot.send_message(user_id, f"üéâ –í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è #{task_id} –æ–¥–æ–±—Ä–µ–Ω–æ! –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{reward:.6f} BTC</b>.")
        except TelegramForbiddenError:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
    else: # reject
        await db_set_proof_status(proof_id, 'rejected')
        await bot.send_message(callback_query.from_user.id, f"‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ID {proof_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
        try:
            await bot.send_message(user_id, f"‚ùå –í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è #{task_id} –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏.")
        except TelegramForbiddenError:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")

    await state.clear()
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_kb())


async def notify_admins_new_proof(proof_id: int, user_id: int, task_id: int):
    user = await db_get_user(user_id)
    task = await db_get_task(task_id)
    username = user['username'] if user and user['username'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    task_name = task['task_name'] if task else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ'

    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id,
                f"üîî –ù–û–í–û–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ó–ê–î–ê–ù–ò–Ø!\n"
                f"ID –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {proof_id}\n"
                f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{username} (ID: {user_id})\n"
                f"–ó–∞–¥–∞–Ω–∏–µ: {task_name} (ID: {task_id})\n"
                f"–ù–∞–∂–º–∏—Ç–µ '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è' –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏, —á—Ç–æ–±—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å.",
                reply_markup=get_admin_kb()
            )
        except TelegramForbiddenError:
            logger.warning(f"–ê–¥–º–∏–Ω {admin_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞ {admin_id} –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: {e}")


@dp.message(F.text == "üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–≤–æ–¥")
@error_handler_decorator
async def admin_check_withdrawals(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    pending_withdrawals = await db_get_pending_withdrawals()
    if not pending_withdrawals:
        await message.answer("–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏.", reply_markup=get_admin_kb())
        return

    text = "<b>–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥, –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n\n"
    for withdraw_req in pending_withdrawals:
        user = await db_get_user(withdraw_req['user_id'])
        username = user['username'] if user and user['username'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        request_date = withdraw_req['request_date'].strftime('%d.%m.%Y %H:%M') if withdraw_req['request_date'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        text += (
            f"<b>ID –∑–∞–ø—Ä–æ—Å–∞:</b> {withdraw_req['withdrawal_id']}\n"
            f"<b>–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{username} (ID: {withdraw_req['user_id']})\n"
            f"<b>–°—É–º–º–∞:</b> {withdraw_req['amount']:.6f if withdraw_req['currency'] == 'BTC' else withdraw_req['amount']:.2f} {withdraw_req['currency']}\n"
            f"<b>–ê–¥—Ä–µ—Å:</b> <code>{withdraw_req['address']}</code>\n"
            f"<b>–î–∞—Ç–∞:</b> {request_date}\n"
            "-----------------------------------\n\n"
        )
        
    await message.answer(text, reply_markup=get_admin_kb())
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ ID –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:", reply_markup=get_admin_withdrawal_decision_kb_list(pending_withdrawals))


def get_admin_withdrawal_decision_kb_list(pending_withdrawals):
    builder = InlineKeyboardBuilder()
    for req in pending_withdrawals:
        builder.row(InlineKeyboardButton(text=f"–í—ã–≤–æ–¥ #{req['withdrawal_id']}", callback_data=f"review_withdrawal_{req['withdrawal_id']}"))
    builder.adjust(2)
    return builder.as_markup()

@dp.callback_query(F.data.startswith("review_withdrawal_"))
@error_handler_decorator
async def admin_review_withdrawal(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    
    withdrawal_id = int(callback_query.data.split('_')[2])
    await callback_query.answer()

    withdrawal = await db_get_proof(withdrawal_id) # –≠—Ç–æ –±—ã–ª–∞ –æ—à–∏–±–∫–∞, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å db_get_withdrawal
    withdrawal = await db_get_withdrawal_request(withdrawal_id) # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

    if not withdrawal or withdrawal['status'] != 'pending':
        await bot.send_message(callback_query.from_user.id, "–≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        await state.clear()
        return

    user = await db_get_user(withdrawal['user_id'])
    username = user['username'] if user and user['username'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    request_date = withdrawal['request_date'].strftime('%d.%m.%Y %H:%M') if withdrawal['request_date'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

    text = (
        f"<b>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥ #{withdrawal_id}</b>\n\n"
        f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{username} (ID: {withdrawal['user_id']})\n"
        f"–°—É–º–º–∞: {withdrawal['amount']:.6f if withdrawal['currency'] == 'BTC' else withdrawal['amount']:.2f} {withdrawal['currency']}\n"
        f"–ê–¥—Ä–µ—Å: <code>{withdrawal['address']}</code>\n"
        f"–î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞: {request_date}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await bot.send_message(callback_query.from_user.id, text, reply_markup=get_admin_withdrawal_decision_kb(withdrawal_id))

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥
async def db_get_withdrawal_request(withdrawal_id: int):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        row = await conn.fetchrow("SELECT withdrawal_id, user_id, amount, currency, address, request_date, status FROM withdrawals WHERE withdrawal_id = $1", withdrawal_id)
        return dict(row) if row else None


@dp.callback_query(F.data.startswith("approve_withdrawal_") | F.data.startswith("reject_withdrawal_"))
@error_handler_decorator
async def admin_decision_withdrawal(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return

    action = callback_query.data.split('_')[0]
    withdrawal_id = int(callback_query.data.split('_')[2])
    await callback_query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query

    withdrawal = await db_get_withdrawal_request(withdrawal_id)
    if not withdrawal or withdrawal['status'] != 'pending':
        await bot.send_message(callback_query.from_user.id, "–≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        await state.clear()
        return

    user_id = withdrawal['user_id']
    amount = withdrawal['amount']
    currency = withdrawal['currency']

    if action == "approve":
        await db_set_withdrawal_status(withdrawal_id, 'approved')
        await bot.send_message(callback_query.from_user.id, f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ID {withdrawal_id} –æ–¥–æ–±—Ä–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ä–µ–¥—Å—Ç–≤.")
        try:
            await bot.send_message(user_id, f"üéâ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount:.6f if currency == 'BTC' else amount:.2f} {currency} –æ–¥–æ–±—Ä–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫.")
        except TelegramForbiddenError:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
    else: # reject
        await db_set_withdrawal_status(withdrawal_id, 'rejected')
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω
        if currency == "BTC":
            await db_update_user_balance(user_id, amount)
        elif currency == "USDT" or currency == "TRC20":
            await db_update_user_usdt_balance(user_id, amount)

        await bot.send_message(callback_query.from_user.id, f"‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ID {withdrawal_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        try:
            await bot.send_message(user_id, f"‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount:.6f if currency == 'BTC' else amount:.2f} {currency} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω.")
        except TelegramForbiddenError:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")

    await state.clear()
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_kb())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text)
@error_handler_decorator
async def handle_invalid_command(message: types.Message):
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", reply_markup=get_main_kb())

# =====================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# =====================

async def main():
    await init_db()
    # –£–¥–∞–ª–∏—Ç–µ –∏–ª–∏ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    # await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, skip_updates=True) # skip_updates=True –ø—Ä–æ–ø—É—Å—Ç–∏—Ç –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
